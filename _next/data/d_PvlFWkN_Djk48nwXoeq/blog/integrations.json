{"pageProps":{"posts":[{"title":"AI Observability with AimOS: A Deep Dive into the LangChain Debugger","date":"2023-11-24T20:58:19.490Z","author":"Hovhannes Tamoyan","description":"Explore step-by-step guide for LangChain Debugger, a tool designed for in-depth tracking and visualization of LangChain scripts. The guide features a hands-on example emphasizing its abilities to log LLMs prompts, tool inputs/outputs, and chain metadata, providing a clear understanding of its functionalities.","slug":"ai-observability-with-aimos-a-deep-dive-into-the-langchain-debugger","image":"/images/dynamic/langchain.png","draft":false,"categories":["Integrations"],"body":{"raw":"Imagine being able to track and visualize every part of your LangChain script in detail. That's what LangChain Debugger does, working smoothly with AimOS. \n\nWe'll look at a sample script to see how well LangChain Debugger and the scripts work together. It will highlight the main features of LangChain Debugger which logs LLMs prompts and generations, tools inputs/outputs, and chains metadata.\n\nIn this guide, we will prompt \"What are the number of parameters in OpenAI‚Äôs GPT5 (based on rumors) and GPT4? What is the logarithm (base e) of the difference between the number of parameters?\n\n> [AimOS üîç ](https://github.com/aimhubio/aimos)‚Äî A user-friendly observability platform for AI systems. It's adaptable, scalable, and versatile.\n\n## Executing LangChain Debugger: A Step-by-Step Guide\n\nLet's do a practical example using a script to interact with LangChain to show how well it works with AimOS and LangChain Debugger.\n\n### Setting Stage\n\nBefore diving into the script, ensure that LangChain Debugger is installed and properly configured. If not, head over to the AimOS GitHub page for installation instructions: https://github.com/aimhubio/aimos.\n\n### Sample Script\n\n### 1. Importing Required Modules\n\nWe begin by importing the necessary modules for LangChain and AimOS interaction.\n\n```\nfrom aimstack.langchain_debugger.callback_handlers import GenericCallbackHandler\nfrom langchain.agents import AgentType, initialize_agent, load_tools\nfrom langchain.llms import OpenAI\n```\n\n### 2. Configuring Callbacks and LangChain LLM\n\nEstablish a callback mechanism using LangChain Debugger's **`GenericCallbackHandler`** and set up the LangChain LLM (Large Language Model) using OpenAI.\n\n```\naim_callback = GenericCallbackHandler(repo_path=\"aim://0.0.0.0:53800\")\ncallbacks = [aim_callback]\nllm = OpenAI(temperature=0, callbacks=callbacks)\n```\n\nEnsure that your AimOS server is active on the default 53800 port. In this instance, the server is running on the local machine. You can start an AimOS server effortlessly with the following command:\n\n```\naimos server\n```\n\n### 3. Loading Tools and Initializing Agent\n\nLoad the required tools for your LangChain script, initialize the agent, and set the agent type as **`ZERO_SHOT_REACT_DESCRIPTION`**.\n\n```\ntools = load_tools([\"serpapi\", \"llm-math\"], llm=llm, callbacks=callbacks)\nagent = initialize_agent(\n    tools,\n    llm,\n    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,\n    callbacks=callbacks,\n)\n```\n\n### 4. Running LangChain Script\n\nExecute your LangChain script within the agent using the **`run`** method.\n\n```\nagent.run(\n    \"What are the number of parameters in GPT5 and GPT4? What is the logarithm (base e) of the difference between the number of parameters?\"\n)\n```\n\n### 5. Flushing Callbacks\n\nEnsure that callbacks are flushed after running the script to capture the trace.\n\n```\naim_callback.flush()\n```\n\nAfter completing these steps, you will successfully log all actions on AimOS. Now, let's run the AimOS UI to observe the tracked metadata. To do this, navigate to the folder where the **`.aim`** repository is initialized and simply execute:\n\n```\naimos ui\n```\n\nüòä Enjoy this preview of what you'll see once you visit the provided URL:\n\n![AimOS Apps](/images/dynamic/navigating-depths-debugger-1-1-.png \"AimOS Apps\")\n\n## Interpreting the results\n\nHead over to the AimOS Traces page to witness the detailed trace of your LangChain script. This page provides a comprehensive overview of every action and interaction within your LangChain environment.\n\nHere you'll find a new trace corresponding to each query in the script. You can get valuable information by checking the Overview, Steps, and Cost tabs. These will show the details about the script‚Äôs execution, token use, and the costs involved.\n\n![LangChain Debugger](/images/dynamic/screenshot-2023-11-23-at-11.57.51‚ÄØpm-1-.png \"LangChain Debugger\")\n\n## Overview: Key Elements\n\nNavigate through the Overview tab to grasp essential information:\n\n* Trace: A unique identifier for each trace, allowing you to easily reference and analyze specific interactions. \n\n* Total Steps: The number of actions or queries performed in a trace, providing a quick measure of complexity\n\n* Total Tokens: The total number of tokens is represented to understand the computational load of your queries, ensuring optimal performance.\n\n* Cost: This represents the total cost of the trace which is a critical factor in resource management, the cost breakdown helps you make informed decisions.\n\n![Overview tab](/images/dynamic/screenshot-2023-11-23-at-11.58.15‚ÄØpm-1-.png \"Overview tab\")\n\n## Steps: Exploring the Process\n\nThe Steps tab provides a detailed walkthrough of the sequence of actions undertaken throughout the pipeline to achieve the specified goal. In our example, the Agent executed a total of 18 steps to successfully accomplish the task.\n\nHere's a breakdown of the pivotal actions:\n\n1. LLM Response: The Language Model (LLM) initially determines that, for the given question, it needs to utilize the Search tool to identify the person in question.\n2. Search Tool Execution: The LLM activates the Search tool to acquire the necessary information, successfully obtaining the desired output.\n3. LLM Decision: Subsequently, the LLM decides to employ the Search tool once again to retrieve additional details, such as the the number of parameters in GPT5 (based on rumors) and GPT4.\n4. Search Tool Execution: The Agent, following the LLM's decision, triggers the Search tool once more, fetching the required information.\n5. Calculator Tool Usage: With the obtained number, the Agent employs the Calculator tool to calculate the logarithm (base e) of the difference between the number of parameters.\n6. Final Answer: Lastly, armed with all the necessary information, the LLM crafts the complete answer to the original question and returns it.\n\n![Steps tab](/images/dynamic/screenshot-2023-11-23-at-11.58.42‚ÄØpm-1-.png \"Steps tab\")\n\n![Steps tab](/images/dynamic/screenshot-2023-11-24-at-12.00.36‚ÄØam-1-.png \"Steps tab\")\n\n## Cost: Evaluating Resource Usage\n\nIn the Cost tab, you can examine three graphs showing token-usage, token-usage-input, and token-usage-output, providing a detailed breakdown of the computational costs associated with your LangChain activities.\n\n* On the x-axis, you can see the steps, which represent the number of times the system made an API request to an LLM (Language Model).\n* On the y-axis, you can see the number of tokens sent or received.\n\n![Cost tab](/images/dynamic/screenshot-2023-11-24-at-12.00.17‚ÄØam-1-.png \"Cost tab\")\n\n## Wrapping up\n\nThe LangChain Debugger in AimOS is a powerful tool for deepening your understanding and gaining in-depth insights into your LangChain script. It logs LLMs prompts and generations, tools inputs/outputs, and chains metadata. It's great for both experienced users and beginners, offering a comprehensive observability.\n\nFor further insights into AI system monitoring and observability of software lifecycle, check out our latest article on the¬†[AimStack blog.](https://aimstack.io/blog/new-releases/aim-4-0-open-source-modular-observability-for-ai-systems)\n\n## Learn more\n\n[AimOS is on a mission to democratize AI Systems logging tools.¬†](https://aimos.readthedocs.io/en/latest/apps/overview.html)üôå\n\nTry out¬†[AimOS](https://github.com/aimhubio/aimos), join the¬†[Aim community](https://community.aimstack.io/),¬†and contribute by sharing your thoughts, suggesting new features, or reporting bugs.\n\nDon‚Äôt forget to leave us a star on¬†[GitHub](https://github.com/aimhubio/aimos/)¬†if you think AimOS is useful, and here is the repository of¬†[Aim](https://github.com/aimhubio/aim),¬†an easy-to-use & supercharged open-source experiment tracker.‚≠êÔ∏è","html":"<p>Imagine being able to track and visualize every part of your LangChain script in detail. That's what LangChain Debugger does, working smoothly with AimOS.</p>\n<p>We'll look at a sample script to see how well LangChain Debugger and the scripts work together. It will highlight the main features of LangChain Debugger which logs LLMs prompts and generations, tools inputs/outputs, and chains metadata.</p>\n<p>In this guide, we will prompt \"What are the number of parameters in OpenAI‚Äôs GPT5 (based on rumors) and GPT4? What is the logarithm (base e) of the difference between the number of parameters?</p>\n<blockquote>\n<p><a href=\"https://github.com/aimhubio/aimos\">AimOS üîç </a>‚Äî A user-friendly observability platform for AI systems. It's adaptable, scalable, and versatile.</p>\n</blockquote>\n<h2>Executing LangChain Debugger: A Step-by-Step Guide</h2>\n<p>Let's do a practical example using a script to interact with LangChain to show how well it works with AimOS and LangChain Debugger.</p>\n<h3>Setting Stage</h3>\n<p>Before diving into the script, ensure that LangChain Debugger is installed and properly configured. If not, head over to the AimOS GitHub page for installation instructions: https://github.com/aimhubio/aimos.</p>\n<h3>Sample Script</h3>\n<h3>1. Importing Required Modules</h3>\n<p>We begin by importing the necessary modules for LangChain and AimOS interaction.</p>\n<pre><code>from aimstack.langchain_debugger.callback_handlers import GenericCallbackHandler\nfrom langchain.agents import AgentType, initialize_agent, load_tools\nfrom langchain.llms import OpenAI\n</code></pre>\n<h3>2. Configuring Callbacks and LangChain LLM</h3>\n<p>Establish a callback mechanism using LangChain Debugger's <strong><code>GenericCallbackHandler</code></strong> and set up the LangChain LLM (Large Language Model) using OpenAI.</p>\n<pre><code>aim_callback = GenericCallbackHandler(repo_path=\"aim://0.0.0.0:53800\")\ncallbacks = [aim_callback]\nllm = OpenAI(temperature=0, callbacks=callbacks)\n</code></pre>\n<p>Ensure that your AimOS server is active on the default 53800 port. In this instance, the server is running on the local machine. You can start an AimOS server effortlessly with the following command:</p>\n<pre><code>aimos server\n</code></pre>\n<h3>3. Loading Tools and Initializing Agent</h3>\n<p>Load the required tools for your LangChain script, initialize the agent, and set the agent type as <strong><code>ZERO_SHOT_REACT_DESCRIPTION</code></strong>.</p>\n<pre><code>tools = load_tools([\"serpapi\", \"llm-math\"], llm=llm, callbacks=callbacks)\nagent = initialize_agent(\n    tools,\n    llm,\n    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,\n    callbacks=callbacks,\n)\n</code></pre>\n<h3>4. Running LangChain Script</h3>\n<p>Execute your LangChain script within the agent using the <strong><code>run</code></strong> method.</p>\n<pre><code>agent.run(\n    \"What are the number of parameters in GPT5 and GPT4? What is the logarithm (base e) of the difference between the number of parameters?\"\n)\n</code></pre>\n<h3>5. Flushing Callbacks</h3>\n<p>Ensure that callbacks are flushed after running the script to capture the trace.</p>\n<pre><code>aim_callback.flush()\n</code></pre>\n<p>After completing these steps, you will successfully log all actions on AimOS. Now, let's run the AimOS UI to observe the tracked metadata. To do this, navigate to the folder where the <strong><code>.aim</code></strong> repository is initialized and simply execute:</p>\n<pre><code>aimos ui\n</code></pre>\n<p>üòä Enjoy this preview of what you'll see once you visit the provided URL:</p>\n<p><img src=\"/images/dynamic/navigating-depths-debugger-1-1-.png\" alt=\"AimOS Apps\" title=\"AimOS Apps\"></p>\n<h2>Interpreting the results</h2>\n<p>Head over to the AimOS Traces page to witness the detailed trace of your LangChain script. This page provides a comprehensive overview of every action and interaction within your LangChain environment.</p>\n<p>Here you'll find a new trace corresponding to each query in the script. You can get valuable information by checking the Overview, Steps, and Cost tabs. These will show the details about the script‚Äôs execution, token use, and the costs involved.</p>\n<p><img src=\"/images/dynamic/screenshot-2023-11-23-at-11.57.51%E2%80%AFpm-1-.png\" alt=\"LangChain Debugger\" title=\"LangChain Debugger\"></p>\n<h2>Overview: Key Elements</h2>\n<p>Navigate through the Overview tab to grasp essential information:</p>\n<ul>\n<li>\n<p>Trace: A unique identifier for each trace, allowing you to easily reference and analyze specific interactions.</p>\n</li>\n<li>\n<p>Total Steps: The number of actions or queries performed in a trace, providing a quick measure of complexity</p>\n</li>\n<li>\n<p>Total Tokens: The total number of tokens is represented to understand the computational load of your queries, ensuring optimal performance.</p>\n</li>\n<li>\n<p>Cost: This represents the total cost of the trace which is a critical factor in resource management, the cost breakdown helps you make informed decisions.</p>\n</li>\n</ul>\n<p><img src=\"/images/dynamic/screenshot-2023-11-23-at-11.58.15%E2%80%AFpm-1-.png\" alt=\"Overview tab\" title=\"Overview tab\"></p>\n<h2>Steps: Exploring the Process</h2>\n<p>The Steps tab provides a detailed walkthrough of the sequence of actions undertaken throughout the pipeline to achieve the specified goal. In our example, the Agent executed a total of 18 steps to successfully accomplish the task.</p>\n<p>Here's a breakdown of the pivotal actions:</p>\n<ol>\n<li>LLM Response: The Language Model (LLM) initially determines that, for the given question, it needs to utilize the Search tool to identify the person in question.</li>\n<li>Search Tool Execution: The LLM activates the Search tool to acquire the necessary information, successfully obtaining the desired output.</li>\n<li>LLM Decision: Subsequently, the LLM decides to employ the Search tool once again to retrieve additional details, such as the the number of parameters in GPT5 (based on rumors) and GPT4.</li>\n<li>Search Tool Execution: The Agent, following the LLM's decision, triggers the Search tool once more, fetching the required information.</li>\n<li>Calculator Tool Usage: With the obtained number, the Agent employs the Calculator tool to calculate the logarithm (base e) of the difference between the number of parameters.</li>\n<li>Final Answer: Lastly, armed with all the necessary information, the LLM crafts the complete answer to the original question and returns it.</li>\n</ol>\n<p><img src=\"/images/dynamic/screenshot-2023-11-23-at-11.58.42%E2%80%AFpm-1-.png\" alt=\"Steps tab\" title=\"Steps tab\"></p>\n<p><img src=\"/images/dynamic/screenshot-2023-11-24-at-12.00.36%E2%80%AFam-1-.png\" alt=\"Steps tab\" title=\"Steps tab\"></p>\n<h2>Cost: Evaluating Resource Usage</h2>\n<p>In the Cost tab, you can examine three graphs showing token-usage, token-usage-input, and token-usage-output, providing a detailed breakdown of the computational costs associated with your LangChain activities.</p>\n<ul>\n<li>On the x-axis, you can see the steps, which represent the number of times the system made an API request to an LLM (Language Model).</li>\n<li>On the y-axis, you can see the number of tokens sent or received.</li>\n</ul>\n<p><img src=\"/images/dynamic/screenshot-2023-11-24-at-12.00.17%E2%80%AFam-1-.png\" alt=\"Cost tab\" title=\"Cost tab\"></p>\n<h2>Wrapping up</h2>\n<p>The LangChain Debugger in AimOS is a powerful tool for deepening your understanding and gaining in-depth insights into your LangChain script. It logs LLMs prompts and generations, tools inputs/outputs, and chains metadata. It's great for both experienced users and beginners, offering a comprehensive observability.</p>\n<p>For further insights into AI system monitoring and observability of software lifecycle, check out our latest article on the¬†<a href=\"https://aimstack.io/blog/new-releases/aim-4-0-open-source-modular-observability-for-ai-systems\">AimStack blog.</a></p>\n<h2>Learn more</h2>\n<p><a href=\"https://aimos.readthedocs.io/en/latest/apps/overview.html\">AimOS is on a mission to democratize AI Systems logging tools.¬†</a>üôå</p>\n<p>Try out¬†<a href=\"https://github.com/aimhubio/aimos\">AimOS</a>, join the¬†<a href=\"https://community.aimstack.io/\">Aim community</a>,¬†and contribute by sharing your thoughts, suggesting new features, or reporting bugs.</p>\n<p>Don‚Äôt forget to leave us a star on¬†<a href=\"https://github.com/aimhubio/aimos/\">GitHub</a>¬†if you think AimOS is useful, and here is the repository of¬†<a href=\"https://github.com/aimhubio/aim\">Aim</a>,¬†an easy-to-use &#x26; supercharged open-source experiment tracker.‚≠êÔ∏è</p>"},"_id":"posts/ai-observability-with-aimos-a-deep-dive-into-the-langchain-debugger.md","_raw":{"sourceFilePath":"posts/ai-observability-with-aimos-a-deep-dive-into-the-langchain-debugger.md","sourceFileName":"ai-observability-with-aimos-a-deep-dive-into-the-langchain-debugger.md","sourceFileDir":"posts","contentType":"markdown","flattenedPath":"posts/ai-observability-with-aimos-a-deep-dive-into-the-langchain-debugger"},"type":"Post"},{"title":"AI Observability with AimOS: A Deep Dive into the LlamaIndex Observer App","date":"2023-11-16T18:12:14.363Z","author":"Hovhannes Tamoyan","description":"Discover AI observability with AimOS's LlamaIndex Observer. Essential insights for efficient AI model tracking and analysis. Check out our guide for observability solutions in the world of AI.","slug":"ai-observability-with-aimos-a-deep-dive-into-the-llamaindex-observer-app","image":"/images/dynamic/llamaindex.png","draft":false,"categories":["Integrations"],"body":{"raw":"Welcome to the world of seamless tracking and visualization! LlamaIndex Observer, a tool that unites the robust capabilities of LlamaIndex with the blazingly fast [AimOS](https://aimstack.io/blog/new-releases/aim-4-0-open-source-modular-observability-for-ai-systems). This integration offers a full-featured platform for effectively monitoring and understanding every detail in your LlamaIndex environment.\n\nIn this guide, we're going to highlight the main aspects of the LlamaIndex Observer application, with a special focus on its Trace page, a key component within the LlamaIndex Observer package in Aim.\n\n# LlamaIndex + AimOS = ‚ù§\n\nImagine being able to see everything that happens in your LlamaIndex system from a high-level perspective. **The LlamaIndex Observer** makes this possible by using AimOS to provide a detailed record of each interaction.\n\n> AimOS üîç ‚Äî A user-friendly observability platform for AI systems. It's adaptable, scalable, and versatile.\n\nWith [AimOS](https://github.com/aimhubio/aimos), you can set up various types of AI monitoring applications, like experiment tracking, production monitoring, and usage analysis.\n\nNow, let‚Äôs see how it works with an example!\n\n## Putting LlamaIndex Observer into Action: A Step-by-Step Guide\n\nWe'll now look at a hands-on example. We'll use a Python script to interact with LlamaIndex and observe how LlamaIndex Tracker records each action. This example demonstrates the smooth interaction between AimOS and LlamaIndex.\n\nBefore starting with the script, ensure AimOS is installed and set up. If you need to install it, visit [AimOS repository](https://github.com/aimhubio/aimos) for the guidelines.\n\n## Sample Script\n\n### 1. Importing Required Modules\n\nFirst we‚Äôll start by importing the necessary Python modules for file manipulation, HTTP requests, and working with LlamaIndex and AimOS.\n\n```\nimport os\nfrom pathlib import Path\nimport requests\nfrom aimstack.llamaindex_observer.callback_handlers import GenericCallbackHandler\nfrom llama_index import ServiceContext, SimpleDirectoryReader, VectorStoreIndex\nfrom llama_index.callbacks.base import CallbackManager\n```\n\n### 2. Downloading Paul Graham's Essay\n\nIn this step, the script downloads Paul Graham's essay from a given URL and saves it locally in a specified directory. \n\nIt‚Äôs important to ensure that the essay is successfully downloaded before moving on to the next steps. Next, we will be asking questions referring this essay.\n\n```\npaul_graham_essay_url = \"<https://raw.githubusercontent.com/run-llama/llama_index/main/docs/examples/data/paul_graham/paul_graham_essay.txt>\"\nresponse = requests.get(paul_graham_essay_url)\noutput_dir = Path(\"aimos/examples/paul_graham_essay/data/\")\n\nif response.status_code == 200:\n    os.system(f\"mkdir -p {output_dir}\")\n    with open(output_dir.joinpath(\"Paul_Graham_Essay.txt\"), \"wb\") as file:\n        file.write(response.content)\nelse:\n    print(\"Failed to download the file.\")\n```\n\n### 3. Loading Document into LlamaIndex\n\nThe script reads the downloaded document using LlamaIndex's **`SimpleDirectoryReader`** and loads it into the system as a document.\n\n```\ndocuments = SimpleDirectoryReader(output_dir).load_data()\n```\n\n### 4. Setting Up AimOS Callback for LlamaIndex Observer\n\n```\naim_callback = GenericCallbackHandler(repo=\"aim://0.0.0.0:53800\")\ncallback_manager = CallbackManager([aim_callback])\n```\n\nEnsure that your AimOS server is active on the default 53800 port. In this instance, the server is running on the local machine. You can start an AimOS server with this simple command command:\n\n```\naimos server\n```\n\n### 5. Creating LlamaIndex Service Context\n\nHere, we configure the LlamaIndex service context, create a vector store index using the loaded documents, and obtain a query engine for interacting with the index.\n\n```\nservice_context = ServiceContext.from_defaults(callback_manager=callback_manager)\nindex = VectorStoreIndex.from_documents(documents, service_context=service_context)\nquery_engine = index.as_query_engine()\n```\n\n### 6. Performing Queries and Flushing Callbacks\n\nThis section triggers queries on the LlamaIndex using the query engine and ensures that the callbacks are flushed, capturing the corresponding traces.\n\n```\naim_callback.flush()\nquery_engine.query(\"How does Graham address the topic of competition and the importance (or lack thereof) of being the first mover in a market?\")\naim_callback.flush()\nquery_engine.query(\"What are Paul Graham's notable projects or companies?\")\naim_callback.flush()\nquery_engine.query(\"What problems did the author encounter with the early AI programs?\")\naim_callback.flush()\n```\n\nAfter completing these steps, you will successfully log all actions on AimOS. Now, let's run the AimOS UI to observe the tracked metadata. To do this, navigate to the folder where the .aim repository is initialized and simply run.\n\n```\naimos ui\n```\n\nüòä Enjoy this preview of what you'll see once you visit the provided URL:\n\n![AimOS Overview](/images/dynamic/1-.png \"AimOS Overview\")\n\nNavigate to the **`llamaindex_observer`** package under AI Systems Debugging.\n\nNow, we will delve into the tracked information.\n\n## Interpreting the Results\n\nOnce you‚Äôve run the script, go to the Traces page in AimOS. There, you'll find a  new trace corresponding to each query in the script. You can get valuable information by checking the Overview, Steps, and Cost tabs. These will show you details about the script‚Äôs execution, token use, and the costs involved.\n\n![AimOS Traces](/images/dynamic/llamaindex-insights-2-.png \"AimOS Traces\")\n\n### Overview Tab: A Quick Summary\n\nThe Overview tab in AimOS gives you a snapshot of what happened. Here are the main things you can see:\n\n**Trace ID:** A unique identifier for each trace, allowing you to easily reference and analyze specific interactions.\n\n**Date and Time:** Timestamps help you understand when actions took place, facilitating a chronological understanding of your LlamaIndex usage.\n\n**Total Steps:** The number of actions or queries performed in a trace, providing a quick measure of complexity.\n\n**Total Tokens:** Understand the computational load of your queries, ensuring optimal performance.\n\n**Cost:** A critical factor in resource management, the cost breakdown helps you make informed decisions.\n\n![Trace ID](/images/dynamic/llamaindex-insights-3.png \"Trace ID\")\n\n## Understanding the Process\n\nAt the top of the Steps tab, you'll find a slider labeled \"Select the step,\" enabling seamless navigation through the LlamaIndex processes. These steps are logged using the 'flush()' command.\n\n### Step 1: Chunking and Embedding\n\nIn the initial step, the provided essay document undergoes a chunking process, dividing it into multiple segments. Simultaneously, embeddings are extracted for each chunk, forming a foundational representation of the document's content.\n\n![LlamaIndex Observer insights](/images/dynamic/llamaindex-insights-4.png \"LlamaIndex Observer insights\")\n\n### Step 2: Query Processing\n\n**Question Formulation:** A specific question is asked about the document, such as \"How does Graham address the topic of competition and the importance of being the first mover in a market?\"\n\n![LlamaIndex Observer question formulation](/images/dynamic/llamaindex-insights-5.png \"LlamaIndex Observer question formulation\")\n\n**Query Initiation:** LlamaIndex initiates a query, retrieving the most relevant chunks from the previously embedded document.\n\n![LlamaIndex Observer query initiation](/images/dynamic/6.png \"LlamaIndex Observer query initiation\")\n\n**Prompt Generation:** A prompt for the language model is crafted. This involves combining the context strings (document chunks) and the question to create an input for the language model.\n\n![LlamaIndex Observer prompt generation](/images/dynamic/7.png \"LlamaIndex Observer prompt generation\")\n\n**Language Model Response:** The language model processes the prompt, generating a response that addresses the asked question.\n\n![LlamaIndex Observer - Language model response](/images/dynamic/8.png \"LlamaIndex Observer - Language model response\")\n\n### Step 3: Iterative Questioning\n\nWhile Step 1 is a one-time occurrence, our example involves asking three distinct questions. The process for generating responses to the second and third questions aligns with the methodology outlined in Step 2, utilizing the previously embedded chunks of the document.\n\nThe additional questions asked are:\n\n* \"What are Paul Graham's notable projects or companies?\" \n\n![Prompt](/images/dynamic/9.png \"Prompt\")\n\nGenerated response:\n\n![Generated response](/images/dynamic/10.png \"Generated response\")\n\n* \"What problems did the author encounter with the early AI programs?\"\n\n![Prompt](/images/dynamic/11.png \"Prompt\")\n\nGenerated response:\n\n![Generated response](/images/dynamic/12.png)\n\n## Cost: Evaluating Resource Usage\n\nIn the Cost tab, you can examine three graphs showing token-usage, token-usage-input, and token-usage-output, providing a detailed breakdown of the computational costs associated with your LlamaIndex activities.\n\n* On the x-axis, you can see the steps, which represent the number of times the system made an API request to an LLM (Language Model).\n* On the y-axis, you can see the number of tokens sent or received.\n\n![Token-usage](/images/dynamic/13.png \"Cost tab\")\n\n## Wrapping up\n\nThe ‚ÄúLlamaIndex Observer‚Äù in AimOS is a powerful tool for deepening your understanding of how your LlamaIndex models operate. It's great for both experienced users and beginners, offering a comprehensive observability of model performance.\n\nFor further insights into AI system monitoring and observability of software lifecycle, check out our latest article on the [AimStack blog](https://aimstack.io/blog/new-releases/aim-4-0-open-source-modular-observability-for-ai-systems). \n\n## Learn more\n\n[AimOS is on a mission to democratize AI Systems logging tools. ](https://aimos.readthedocs.io/en/latest/apps/overview.html)üôå\n\nTry out¬†**[AimOS](https://github.com/aimhubio/aimos)**, join the¬†**[Aim community](https://community.aimstack.io/),** and contribute by sharing your thoughts, suggesting new features, or reporting bugs.\n\nDon‚Äôt forget to leave us a star on¬†[GitHub](https://github.com/aimhubio/aimos/tree/main)¬†if you think AimOS is useful, and here is the repository of¬†[Aim](https://github.com/aimhubio/aim),¬†an easy-to-use & supercharged open-source experiment tracker.‚≠êÔ∏è","html":"<p>Welcome to the world of seamless tracking and visualization! LlamaIndex Observer, a tool that unites the robust capabilities of LlamaIndex with the blazingly fast <a href=\"https://aimstack.io/blog/new-releases/aim-4-0-open-source-modular-observability-for-ai-systems\">AimOS</a>. This integration offers a full-featured platform for effectively monitoring and understanding every detail in your LlamaIndex environment.</p>\n<p>In this guide, we're going to highlight the main aspects of the LlamaIndex Observer application, with a special focus on its Trace page, a key component within the LlamaIndex Observer package in Aim.</p>\n<h1>LlamaIndex + AimOS = ‚ù§</h1>\n<p>Imagine being able to see everything that happens in your LlamaIndex system from a high-level perspective. <strong>The LlamaIndex Observer</strong> makes this possible by using AimOS to provide a detailed record of each interaction.</p>\n<blockquote>\n<p>AimOS üîç ‚Äî A user-friendly observability platform for AI systems. It's adaptable, scalable, and versatile.</p>\n</blockquote>\n<p>With <a href=\"https://github.com/aimhubio/aimos\">AimOS</a>, you can set up various types of AI monitoring applications, like experiment tracking, production monitoring, and usage analysis.</p>\n<p>Now, let‚Äôs see how it works with an example!</p>\n<h2>Putting LlamaIndex Observer into Action: A Step-by-Step Guide</h2>\n<p>We'll now look at a hands-on example. We'll use a Python script to interact with LlamaIndex and observe how LlamaIndex Tracker records each action. This example demonstrates the smooth interaction between AimOS and LlamaIndex.</p>\n<p>Before starting with the script, ensure AimOS is installed and set up. If you need to install it, visit <a href=\"https://github.com/aimhubio/aimos\">AimOS repository</a> for the guidelines.</p>\n<h2>Sample Script</h2>\n<h3>1. Importing Required Modules</h3>\n<p>First we‚Äôll start by importing the necessary Python modules for file manipulation, HTTP requests, and working with LlamaIndex and AimOS.</p>\n<pre><code>import os\nfrom pathlib import Path\nimport requests\nfrom aimstack.llamaindex_observer.callback_handlers import GenericCallbackHandler\nfrom llama_index import ServiceContext, SimpleDirectoryReader, VectorStoreIndex\nfrom llama_index.callbacks.base import CallbackManager\n</code></pre>\n<h3>2. Downloading Paul Graham's Essay</h3>\n<p>In this step, the script downloads Paul Graham's essay from a given URL and saves it locally in a specified directory.</p>\n<p>It‚Äôs important to ensure that the essay is successfully downloaded before moving on to the next steps. Next, we will be asking questions referring this essay.</p>\n<pre><code>paul_graham_essay_url = \"&#x3C;https://raw.githubusercontent.com/run-llama/llama_index/main/docs/examples/data/paul_graham/paul_graham_essay.txt>\"\nresponse = requests.get(paul_graham_essay_url)\noutput_dir = Path(\"aimos/examples/paul_graham_essay/data/\")\n\nif response.status_code == 200:\n    os.system(f\"mkdir -p {output_dir}\")\n    with open(output_dir.joinpath(\"Paul_Graham_Essay.txt\"), \"wb\") as file:\n        file.write(response.content)\nelse:\n    print(\"Failed to download the file.\")\n</code></pre>\n<h3>3. Loading Document into LlamaIndex</h3>\n<p>The script reads the downloaded document using LlamaIndex's <strong><code>SimpleDirectoryReader</code></strong> and loads it into the system as a document.</p>\n<pre><code>documents = SimpleDirectoryReader(output_dir).load_data()\n</code></pre>\n<h3>4. Setting Up AimOS Callback for LlamaIndex Observer</h3>\n<pre><code>aim_callback = GenericCallbackHandler(repo=\"aim://0.0.0.0:53800\")\ncallback_manager = CallbackManager([aim_callback])\n</code></pre>\n<p>Ensure that your AimOS server is active on the default 53800 port. In this instance, the server is running on the local machine. You can start an AimOS server with this simple command command:</p>\n<pre><code>aimos server\n</code></pre>\n<h3>5. Creating LlamaIndex Service Context</h3>\n<p>Here, we configure the LlamaIndex service context, create a vector store index using the loaded documents, and obtain a query engine for interacting with the index.</p>\n<pre><code>service_context = ServiceContext.from_defaults(callback_manager=callback_manager)\nindex = VectorStoreIndex.from_documents(documents, service_context=service_context)\nquery_engine = index.as_query_engine()\n</code></pre>\n<h3>6. Performing Queries and Flushing Callbacks</h3>\n<p>This section triggers queries on the LlamaIndex using the query engine and ensures that the callbacks are flushed, capturing the corresponding traces.</p>\n<pre><code>aim_callback.flush()\nquery_engine.query(\"How does Graham address the topic of competition and the importance (or lack thereof) of being the first mover in a market?\")\naim_callback.flush()\nquery_engine.query(\"What are Paul Graham's notable projects or companies?\")\naim_callback.flush()\nquery_engine.query(\"What problems did the author encounter with the early AI programs?\")\naim_callback.flush()\n</code></pre>\n<p>After completing these steps, you will successfully log all actions on AimOS. Now, let's run the AimOS UI to observe the tracked metadata. To do this, navigate to the folder where the .aim repository is initialized and simply run.</p>\n<pre><code>aimos ui\n</code></pre>\n<p>üòä Enjoy this preview of what you'll see once you visit the provided URL:</p>\n<p><img src=\"/images/dynamic/1-.png\" alt=\"AimOS Overview\" title=\"AimOS Overview\"></p>\n<p>Navigate to the <strong><code>llamaindex_observer</code></strong> package under AI Systems Debugging.</p>\n<p>Now, we will delve into the tracked information.</p>\n<h2>Interpreting the Results</h2>\n<p>Once you‚Äôve run the script, go to the Traces page in AimOS. There, you'll find a  new trace corresponding to each query in the script. You can get valuable information by checking the Overview, Steps, and Cost tabs. These will show you details about the script‚Äôs execution, token use, and the costs involved.</p>\n<p><img src=\"/images/dynamic/llamaindex-insights-2-.png\" alt=\"AimOS Traces\" title=\"AimOS Traces\"></p>\n<h3>Overview Tab: A Quick Summary</h3>\n<p>The Overview tab in AimOS gives you a snapshot of what happened. Here are the main things you can see:</p>\n<p><strong>Trace ID:</strong> A unique identifier for each trace, allowing you to easily reference and analyze specific interactions.</p>\n<p><strong>Date and Time:</strong> Timestamps help you understand when actions took place, facilitating a chronological understanding of your LlamaIndex usage.</p>\n<p><strong>Total Steps:</strong> The number of actions or queries performed in a trace, providing a quick measure of complexity.</p>\n<p><strong>Total Tokens:</strong> Understand the computational load of your queries, ensuring optimal performance.</p>\n<p><strong>Cost:</strong> A critical factor in resource management, the cost breakdown helps you make informed decisions.</p>\n<p><img src=\"/images/dynamic/llamaindex-insights-3.png\" alt=\"Trace ID\" title=\"Trace ID\"></p>\n<h2>Understanding the Process</h2>\n<p>At the top of the Steps tab, you'll find a slider labeled \"Select the step,\" enabling seamless navigation through the LlamaIndex processes. These steps are logged using the 'flush()' command.</p>\n<h3>Step 1: Chunking and Embedding</h3>\n<p>In the initial step, the provided essay document undergoes a chunking process, dividing it into multiple segments. Simultaneously, embeddings are extracted for each chunk, forming a foundational representation of the document's content.</p>\n<p><img src=\"/images/dynamic/llamaindex-insights-4.png\" alt=\"LlamaIndex Observer insights\" title=\"LlamaIndex Observer insights\"></p>\n<h3>Step 2: Query Processing</h3>\n<p><strong>Question Formulation:</strong> A specific question is asked about the document, such as \"How does Graham address the topic of competition and the importance of being the first mover in a market?\"</p>\n<p><img src=\"/images/dynamic/llamaindex-insights-5.png\" alt=\"LlamaIndex Observer question formulation\" title=\"LlamaIndex Observer question formulation\"></p>\n<p><strong>Query Initiation:</strong> LlamaIndex initiates a query, retrieving the most relevant chunks from the previously embedded document.</p>\n<p><img src=\"/images/dynamic/6.png\" alt=\"LlamaIndex Observer query initiation\" title=\"LlamaIndex Observer query initiation\"></p>\n<p><strong>Prompt Generation:</strong> A prompt for the language model is crafted. This involves combining the context strings (document chunks) and the question to create an input for the language model.</p>\n<p><img src=\"/images/dynamic/7.png\" alt=\"LlamaIndex Observer prompt generation\" title=\"LlamaIndex Observer prompt generation\"></p>\n<p><strong>Language Model Response:</strong> The language model processes the prompt, generating a response that addresses the asked question.</p>\n<p><img src=\"/images/dynamic/8.png\" alt=\"LlamaIndex Observer - Language model response\" title=\"LlamaIndex Observer - Language model response\"></p>\n<h3>Step 3: Iterative Questioning</h3>\n<p>While Step 1 is a one-time occurrence, our example involves asking three distinct questions. The process for generating responses to the second and third questions aligns with the methodology outlined in Step 2, utilizing the previously embedded chunks of the document.</p>\n<p>The additional questions asked are:</p>\n<ul>\n<li>\"What are Paul Graham's notable projects or companies?\"</li>\n</ul>\n<p><img src=\"/images/dynamic/9.png\" alt=\"Prompt\" title=\"Prompt\"></p>\n<p>Generated response:</p>\n<p><img src=\"/images/dynamic/10.png\" alt=\"Generated response\" title=\"Generated response\"></p>\n<ul>\n<li>\"What problems did the author encounter with the early AI programs?\"</li>\n</ul>\n<p><img src=\"/images/dynamic/11.png\" alt=\"Prompt\" title=\"Prompt\"></p>\n<p>Generated response:</p>\n<p><img src=\"/images/dynamic/12.png\" alt=\"Generated response\"></p>\n<h2>Cost: Evaluating Resource Usage</h2>\n<p>In the Cost tab, you can examine three graphs showing token-usage, token-usage-input, and token-usage-output, providing a detailed breakdown of the computational costs associated with your LlamaIndex activities.</p>\n<ul>\n<li>On the x-axis, you can see the steps, which represent the number of times the system made an API request to an LLM (Language Model).</li>\n<li>On the y-axis, you can see the number of tokens sent or received.</li>\n</ul>\n<p><img src=\"/images/dynamic/13.png\" alt=\"Token-usage\" title=\"Cost tab\"></p>\n<h2>Wrapping up</h2>\n<p>The ‚ÄúLlamaIndex Observer‚Äù in AimOS is a powerful tool for deepening your understanding of how your LlamaIndex models operate. It's great for both experienced users and beginners, offering a comprehensive observability of model performance.</p>\n<p>For further insights into AI system monitoring and observability of software lifecycle, check out our latest article on the <a href=\"https://aimstack.io/blog/new-releases/aim-4-0-open-source-modular-observability-for-ai-systems\">AimStack blog</a>.</p>\n<h2>Learn more</h2>\n<p><a href=\"https://aimos.readthedocs.io/en/latest/apps/overview.html\">AimOS is on a mission to democratize AI Systems logging tools. </a>üôå</p>\n<p>Try out¬†<strong><a href=\"https://github.com/aimhubio/aimos\">AimOS</a></strong>, join the¬†<strong><a href=\"https://community.aimstack.io/\">Aim community</a>,</strong> and contribute by sharing your thoughts, suggesting new features, or reporting bugs.</p>\n<p>Don‚Äôt forget to leave us a star on¬†<a href=\"https://github.com/aimhubio/aimos/tree/main\">GitHub</a>¬†if you think AimOS is useful, and here is the repository of¬†<a href=\"https://github.com/aimhubio/aim\">Aim</a>,¬†an easy-to-use &#x26; supercharged open-source experiment tracker.‚≠êÔ∏è</p>"},"_id":"posts/ai-observability-with-aimos-a-deep-dive-into-the-llamaindex-observer-app.md","_raw":{"sourceFilePath":"posts/ai-observability-with-aimos-a-deep-dive-into-the-llamaindex-observer-app.md","sourceFileName":"ai-observability-with-aimos-a-deep-dive-into-the-llamaindex-observer-app.md","sourceFileDir":"posts","contentType":"markdown","flattenedPath":"posts/ai-observability-with-aimos-a-deep-dive-into-the-llamaindex-observer-app"},"type":"Post"},{"title":"Exploring your PyTorch Lightning experiments with AimOS","date":"2024-01-11T13:41:33.464Z","author":"Hovhannes Tamoyan","description":"Explore how AimOS can boost your PyTorch Lightning experiments. This article provides a comprehensive guide with a practical example, emphasizing the integration of PyTorch Lightning into AimOS.","slug":"exploring-your-pytorch-lightning-experiments-with-aimos","image":"/images/dynamic/banner1.png","draft":false,"categories":["Integrations"],"body":{"raw":"Discover seamless tracking and exploration of your PyTorch Lightning experiments with AimOS callback handler. Store all the metadata of your experiments and track the corresponding metrics. This article provides a straightforward walkthrough of how it works with a practical example, focusing on integrating PyTorch Lightning into AimOS.\n\n## Introduction\n\n\n\n[AimOS](https://aimstack.io/blog/new-releases/aim-4-0-open-source-modular-observability-for-ai-systems), through its seamless integration, meticulously tracks all your hyperparameters and metrics for PyTorch Lightning experiments. To see this work, let's dive into an example script to witness the synergy between AimOS and your PyTorch Lightning experiments.\n\n> AimOS üîç ‚Äî An easy-to-use modular observability for AI Systems. Extensible, scalable and modular.\n\n## Running a Sample Training with PyTorch Lightning: A Step-by-Step Guide\n\n\n\nLet's take a look at a practical example using a script to train a simple NN for image classification on MNIST dataset.\n\n\n\n### Setting the Stage\n\n\n\nBefore diving into the script, ensure that AimOS is installed. If not, simply run: \\`pip3 install aimos\\`\n\n### 1. Importing Required Modules\n\n\n\nStart by importing the necessary modules.\n\n```\nimport os\n\nimport lightning.pytorch as pl\nimport torch\nfrom aimstack.experiment_tracker.pytorch_lightning import Logger as AimLogger\nfrom torch import nn, optim, utils\nfrom torch.nn import functional as F\nfrom torchmetrics import Accuracy\nfrom torchvision.datasets import MNIST\nfrom torchvision.transforms import ToTensor\n```\n\n### 2. Preparing the Dataset and the DataLoaders\n\nDownload the training and test subsets of the MNIST dataset and load it, after which do random split of the training set dividing it into training and the validation sets. Afterwards, simply define the DataLoaders with large batch sizes and multiple workers to speed up the process.\n\n```\ndataset = MNIST(os.getcwd(), train=True, download=True, transform=ToTensor())\ntrain_dataset, val_dataset = utils.data.random_split(dataset, [55000, 5000])\ntest_dataset = MNIST(os.getcwd(), train=False, download=True, transform=ToTensor())\n\ntrain_loader = utils.data.DataLoader(train_dataset, num_workers=2, batch_size=256)\nval_loader = utils.data.DataLoader(val_dataset, num_workers=2, batch_size=256)\ntest_loader = utils.data.DataLoader(test_dataset, num_workers=2, batch_size=256)\n```\n\n### 3. Instantiate the Model\n\nLet's create a PyTorch Lightning module that will contain the model and the logic for performing forward passes through the model during training, validation, and testing. We will also configure the optimizer within the module.\n\n```\nclass LitModule(pl.LightningModule):\n    def __init__(self, hidden_size=64, lr=5e-3):\n        super().__init__()\n        self.hidden_size = hidden_size\n        self.lr = lr\n        self.num_classes = 10\n        self.dims = (1, 28, 28)\n        channels, width, height = self.dims\n\n        self.model = nn.Sequential(\n            nn.Flatten(),\n            nn.Linear(channels * width * height, hidden_size),\n            nn.ReLU(),\n            nn.Dropout(0.1),\n            nn.Linear(hidden_size, hidden_size),\n            nn.ReLU(),\n            nn.Dropout(0.1),\n            nn.Linear(hidden_size, self.num_classes),\n        )\n\n        self.accuracy = Accuracy(task=\"multiclass\", num_classes=self.num_classes)\n\n    def forward(self, x):\n        x = self.model(x)\n        return F.log_softmax(x, dim=1)\n\n    def training_step(self, batch, batch_idx):\n        x, y = batch\n        logits = self(x)\n        loss = F.nll_loss(logits, y)\n        self.log(\"train_loss\", loss)\n\n        return loss\n\n    def validation_step(self, batch, batch_idx):\n        x, y = batch\n        logits = self(x)\n        loss = F.nll_loss(logits, y)\n        preds = torch.argmax(logits, dim=1)\n        self.accuracy(preds, y)\n\n        self.log(\"val_loss\", loss, prog_bar=True)\n        self.log(\"val_acc\", self.accuracy, prog_bar=True)\n\n        return loss\n\n    def test_step(self, batch, batch_idx):\n        x, y = batch\n        logits = self(x)\n        loss = F.nll_loss(logits, y)\n        preds = torch.argmax(logits, dim=1)\n        self.accuracy(preds, y)\n\n        self.log(\"test_loss\", loss, prog_bar=True)\n        self.log(\"test_acc\", self.accuracy, prog_bar=True)\n\n        return loss\n\n    def configure_optimizers(self):\n        optimizer = optim.Adam(self.parameters(), lr=self.lr)\n        return optimizer\n```\n\nTo log metrics and the loss, we will use the self.log method provided by the PyTorch Lightning module. Simply provide the name of the metric and the corresponding value to track. For validation and test steps we will also calculate the multi-class accuracy and track it in their respective contexts.\n\n### 4. Initialize AimOS Callback\n\n\n\nInitialize the AimOS callback by providing the experiment name.\n\n```\naim_logger = AimLogger(\n    experiment_name=\"example_experiment\"\n)\n```\n\nMake sure that your AimOS server is active and running. If it is not, use the following command to start it up. By default, it should be on port 53800.\n\n```\naimos server\n```\n\n### 5. Training\n\nInstantiate the module we created recently, set the learning rate of the experiment as we will run experiments with different learning rates. After which simply define the trainer and let the training begin. üöÄ\n\n```\nmodel = LitModule(lr=lr)\naim_logger.experiment.set(\"lr\", lr, strict=False)\n\ntrainer = pl.Trainer(accelerator=\"gpu\", devices=1, max_epochs=5, logger=aim_logger)\ntrainer.fit(model=model, train_dataloaders=train_loader, val_dataloaders=val_loader)\n\ntrainer.test(dataloaders=test_loader)\n```\n\nLet‚Äôs use these learning rates to have more understanding about the learning curve of the task: `[5e-1, 5e-2, 5e-3, 5e-4, 5e-5, 5e-6]`.\n\nAfter completing these steps, you will successfully log all actions on AimOS. Now, run the AimOS UI to observe the tracked metadata. Navigate to the folder where the `.aim `repository is initialized and execute:\n\n```\naimos ui\n```\n\nThis is the view you'll see after following the provided URL:\n\n![AimOS apps](/images/dynamic/pytorch-lightning-aimos-screenshot-dec-21.png \"AimOS apps\")\n\n## Interpreting Experiment Results\n\nNow let‚Äôs dive into the UI and explore the wealth of information tracked by AimOS to gain insights about your PyTorch Lightning experiment. Navigate through the following sections for a comprehensive understanding of your experiment's performance.\n\n\n\n## AimOS Overview Page\n\nHead over to the AimOS Overview page to witness the containers and sequences overview tables of your PyTorch Lightning experiment. This page offers an abstract overview of the number of experiments, sequences, metrics, and system metrics tracked within your experiment.\n\n![Overview](/images/dynamic/pytorch-lightning-aimos-screenshot-dec-21-1-.png \"Overview\")\n\n## AimOS Runs Page\n\nVisit the AimOS Runs page to view the table of all runs, containing basic information about the experiment. This includes hash system parameters, hyperparameters, and model configurations/information.\n\n![Runs page](/images/dynamic/dec-21-screenshot-from-aimos.png \"Runs page\")\n\n## Run Overview\n\nBy navigating to each run‚Äôs individual page, you'll have a detailed view of the activities within that run.\n\nNavigate through the Overview tab to grasp essential information such as Run Parameters, Metrics (last metrics scores), CLI Arguments used to execute the experiment, Environment Variables, Packages, and their versions.\n\n![Run page](/images/dynamic/pytorch-lightning-aimos-screenshot-dec-21-2-.png \"Run page\")\n\n## Params Tab\n\nFor a more detailed view of all parameters, navigate to the Params tab.\n\n![Params tab](/images/dynamic/pytorch-lightning-aimos-screenshot-dec-21-3-.png \"Params tan\")\n\n## Metrics Tab\n\nIn the Metrics tab, you can explore the graphs of all the tracked metrics. In this example, we tracked the loss and accuracy metrics. To have a better view, let's apply color grouping to the runs based on their context.\n\n![Metrics tab](/images/dynamic/pytorch-lightning-aimos-screenshot-dec-21-4-.png \"Metrics tab\")\n\nIn the remaining tabs, discover corresponding types of tracked objects, such as Figures, Text, and Audios.\n\n## Comparing all Runs\n\n\n\nLet's use the Metrics explorer to observe the relationship between accuracy and loss based on the learning rate. To do this, select the `loss` and `acc `metrics, apply the stroke by `metric.context.subset `, and use a log-scale on the y-axis.\n\n![Metrics explorer](/images/dynamic/pytorch-lightning-aimos-screenshot-dec-21-5-1-.png \"Metrics explorer\")\n\n## Wrapping up\n\nAimOS provides a comprehensive suite of tools to analyze and understand your PyTorch Lightning experiment thoroughly. By leveraging these insights, you can streamline your experimentation process and make data-driven decisions. Embrace the power of AimOS to enhance your PyTorch Lightning experiment experience today!\n\n\n\nFor further insights into AI system monitoring and observability of software lifecycle, check out our latest article on¬†[AimStack blog.](https://aimstack.io/blog)\n\n## Learn more\n\n\n\n[AimOS is on a mission to democratize AI Systems logging tools](https://aimos.readthedocs.io/en/latest/apps/overview.html).¬†üôå\n\nTry out¬†[AimOS,](https://github.com/aimhubio/aimos) join the¬†[Aim community](https://community.aimstack.io/)¬†and contribute by sharing your thoughts, suggesting new features, or reporting bugs.\n\nDon‚Äôt forget to leave us a star on¬†GitHub if you think [AimOS](https://github.com/aimhubio/aimos) is useful, and here is the repository of¬†[Aim](https://github.com/aimhubio/aim),¬†an easy-to-use & supercharged open-source experiment tracker.‚≠êÔ∏è","html":"<p>Discover seamless tracking and exploration of your PyTorch Lightning experiments with AimOS callback handler. Store all the metadata of your experiments and track the corresponding metrics. This article provides a straightforward walkthrough of how it works with a practical example, focusing on integrating PyTorch Lightning into AimOS.</p>\n<h2>Introduction</h2>\n<p><a href=\"https://aimstack.io/blog/new-releases/aim-4-0-open-source-modular-observability-for-ai-systems\">AimOS</a>, through its seamless integration, meticulously tracks all your hyperparameters and metrics for PyTorch Lightning experiments. To see this work, let's dive into an example script to witness the synergy between AimOS and your PyTorch Lightning experiments.</p>\n<blockquote>\n<p>AimOS üîç ‚Äî An easy-to-use modular observability for AI Systems. Extensible, scalable and modular.</p>\n</blockquote>\n<h2>Running a Sample Training with PyTorch Lightning: A Step-by-Step Guide</h2>\n<p>Let's take a look at a practical example using a script to train a simple NN for image classification on MNIST dataset.</p>\n<h3>Setting the Stage</h3>\n<p>Before diving into the script, ensure that AimOS is installed. If not, simply run: `pip3 install aimos`</p>\n<h3>1. Importing Required Modules</h3>\n<p>Start by importing the necessary modules.</p>\n<pre><code>import os\n\nimport lightning.pytorch as pl\nimport torch\nfrom aimstack.experiment_tracker.pytorch_lightning import Logger as AimLogger\nfrom torch import nn, optim, utils\nfrom torch.nn import functional as F\nfrom torchmetrics import Accuracy\nfrom torchvision.datasets import MNIST\nfrom torchvision.transforms import ToTensor\n</code></pre>\n<h3>2. Preparing the Dataset and the DataLoaders</h3>\n<p>Download the training and test subsets of the MNIST dataset and load it, after which do random split of the training set dividing it into training and the validation sets. Afterwards, simply define the DataLoaders with large batch sizes and multiple workers to speed up the process.</p>\n<pre><code>dataset = MNIST(os.getcwd(), train=True, download=True, transform=ToTensor())\ntrain_dataset, val_dataset = utils.data.random_split(dataset, [55000, 5000])\ntest_dataset = MNIST(os.getcwd(), train=False, download=True, transform=ToTensor())\n\ntrain_loader = utils.data.DataLoader(train_dataset, num_workers=2, batch_size=256)\nval_loader = utils.data.DataLoader(val_dataset, num_workers=2, batch_size=256)\ntest_loader = utils.data.DataLoader(test_dataset, num_workers=2, batch_size=256)\n</code></pre>\n<h3>3. Instantiate the Model</h3>\n<p>Let's create a PyTorch Lightning module that will contain the model and the logic for performing forward passes through the model during training, validation, and testing. We will also configure the optimizer within the module.</p>\n<pre><code>class LitModule(pl.LightningModule):\n    def __init__(self, hidden_size=64, lr=5e-3):\n        super().__init__()\n        self.hidden_size = hidden_size\n        self.lr = lr\n        self.num_classes = 10\n        self.dims = (1, 28, 28)\n        channels, width, height = self.dims\n\n        self.model = nn.Sequential(\n            nn.Flatten(),\n            nn.Linear(channels * width * height, hidden_size),\n            nn.ReLU(),\n            nn.Dropout(0.1),\n            nn.Linear(hidden_size, hidden_size),\n            nn.ReLU(),\n            nn.Dropout(0.1),\n            nn.Linear(hidden_size, self.num_classes),\n        )\n\n        self.accuracy = Accuracy(task=\"multiclass\", num_classes=self.num_classes)\n\n    def forward(self, x):\n        x = self.model(x)\n        return F.log_softmax(x, dim=1)\n\n    def training_step(self, batch, batch_idx):\n        x, y = batch\n        logits = self(x)\n        loss = F.nll_loss(logits, y)\n        self.log(\"train_loss\", loss)\n\n        return loss\n\n    def validation_step(self, batch, batch_idx):\n        x, y = batch\n        logits = self(x)\n        loss = F.nll_loss(logits, y)\n        preds = torch.argmax(logits, dim=1)\n        self.accuracy(preds, y)\n\n        self.log(\"val_loss\", loss, prog_bar=True)\n        self.log(\"val_acc\", self.accuracy, prog_bar=True)\n\n        return loss\n\n    def test_step(self, batch, batch_idx):\n        x, y = batch\n        logits = self(x)\n        loss = F.nll_loss(logits, y)\n        preds = torch.argmax(logits, dim=1)\n        self.accuracy(preds, y)\n\n        self.log(\"test_loss\", loss, prog_bar=True)\n        self.log(\"test_acc\", self.accuracy, prog_bar=True)\n\n        return loss\n\n    def configure_optimizers(self):\n        optimizer = optim.Adam(self.parameters(), lr=self.lr)\n        return optimizer\n</code></pre>\n<p>To log metrics and the loss, we will use the self.log method provided by the PyTorch Lightning module. Simply provide the name of the metric and the corresponding value to track. For validation and test steps we will also calculate the multi-class accuracy and track it in their respective contexts.</p>\n<h3>4. Initialize AimOS Callback</h3>\n<p>Initialize the AimOS callback by providing the experiment name.</p>\n<pre><code>aim_logger = AimLogger(\n    experiment_name=\"example_experiment\"\n)\n</code></pre>\n<p>Make sure that your AimOS server is active and running. If it is not, use the following command to start it up. By default, it should be on port 53800.</p>\n<pre><code>aimos server\n</code></pre>\n<h3>5. Training</h3>\n<p>Instantiate the module we created recently, set the learning rate of the experiment as we will run experiments with different learning rates. After which simply define the trainer and let the training begin. üöÄ</p>\n<pre><code>model = LitModule(lr=lr)\naim_logger.experiment.set(\"lr\", lr, strict=False)\n\ntrainer = pl.Trainer(accelerator=\"gpu\", devices=1, max_epochs=5, logger=aim_logger)\ntrainer.fit(model=model, train_dataloaders=train_loader, val_dataloaders=val_loader)\n\ntrainer.test(dataloaders=test_loader)\n</code></pre>\n<p>Let‚Äôs use these learning rates to have more understanding about the learning curve of the task: <code>[5e-1, 5e-2, 5e-3, 5e-4, 5e-5, 5e-6]</code>.</p>\n<p>After completing these steps, you will successfully log all actions on AimOS. Now, run the AimOS UI to observe the tracked metadata. Navigate to the folder where the <code>.aim </code>repository is initialized and execute:</p>\n<pre><code>aimos ui\n</code></pre>\n<p>This is the view you'll see after following the provided URL:</p>\n<p><img src=\"/images/dynamic/pytorch-lightning-aimos-screenshot-dec-21.png\" alt=\"AimOS apps\" title=\"AimOS apps\"></p>\n<h2>Interpreting Experiment Results</h2>\n<p>Now let‚Äôs dive into the UI and explore the wealth of information tracked by AimOS to gain insights about your PyTorch Lightning experiment. Navigate through the following sections for a comprehensive understanding of your experiment's performance.</p>\n<h2>AimOS Overview Page</h2>\n<p>Head over to the AimOS Overview page to witness the containers and sequences overview tables of your PyTorch Lightning experiment. This page offers an abstract overview of the number of experiments, sequences, metrics, and system metrics tracked within your experiment.</p>\n<p><img src=\"/images/dynamic/pytorch-lightning-aimos-screenshot-dec-21-1-.png\" alt=\"Overview\" title=\"Overview\"></p>\n<h2>AimOS Runs Page</h2>\n<p>Visit the AimOS Runs page to view the table of all runs, containing basic information about the experiment. This includes hash system parameters, hyperparameters, and model configurations/information.</p>\n<p><img src=\"/images/dynamic/dec-21-screenshot-from-aimos.png\" alt=\"Runs page\" title=\"Runs page\"></p>\n<h2>Run Overview</h2>\n<p>By navigating to each run‚Äôs individual page, you'll have a detailed view of the activities within that run.</p>\n<p>Navigate through the Overview tab to grasp essential information such as Run Parameters, Metrics (last metrics scores), CLI Arguments used to execute the experiment, Environment Variables, Packages, and their versions.</p>\n<p><img src=\"/images/dynamic/pytorch-lightning-aimos-screenshot-dec-21-2-.png\" alt=\"Run page\" title=\"Run page\"></p>\n<h2>Params Tab</h2>\n<p>For a more detailed view of all parameters, navigate to the Params tab.</p>\n<p><img src=\"/images/dynamic/pytorch-lightning-aimos-screenshot-dec-21-3-.png\" alt=\"Params tab\" title=\"Params tan\"></p>\n<h2>Metrics Tab</h2>\n<p>In the Metrics tab, you can explore the graphs of all the tracked metrics. In this example, we tracked the loss and accuracy metrics. To have a better view, let's apply color grouping to the runs based on their context.</p>\n<p><img src=\"/images/dynamic/pytorch-lightning-aimos-screenshot-dec-21-4-.png\" alt=\"Metrics tab\" title=\"Metrics tab\"></p>\n<p>In the remaining tabs, discover corresponding types of tracked objects, such as Figures, Text, and Audios.</p>\n<h2>Comparing all Runs</h2>\n<p>Let's use the Metrics explorer to observe the relationship between accuracy and loss based on the learning rate. To do this, select the <code>loss</code> and <code>acc </code>metrics, apply the stroke by <code>metric.context.subset </code>, and use a log-scale on the y-axis.</p>\n<p><img src=\"/images/dynamic/pytorch-lightning-aimos-screenshot-dec-21-5-1-.png\" alt=\"Metrics explorer\" title=\"Metrics explorer\"></p>\n<h2>Wrapping up</h2>\n<p>AimOS provides a comprehensive suite of tools to analyze and understand your PyTorch Lightning experiment thoroughly. By leveraging these insights, you can streamline your experimentation process and make data-driven decisions. Embrace the power of AimOS to enhance your PyTorch Lightning experiment experience today!</p>\n<p>For further insights into AI system monitoring and observability of software lifecycle, check out our latest article on¬†<a href=\"https://aimstack.io/blog\">AimStack blog.</a></p>\n<h2>Learn more</h2>\n<p><a href=\"https://aimos.readthedocs.io/en/latest/apps/overview.html\">AimOS is on a mission to democratize AI Systems logging tools</a>.¬†üôå</p>\n<p>Try out¬†<a href=\"https://github.com/aimhubio/aimos\">AimOS,</a> join the¬†<a href=\"https://community.aimstack.io/\">Aim community</a>¬†and contribute by sharing your thoughts, suggesting new features, or reporting bugs.</p>\n<p>Don‚Äôt forget to leave us a star on¬†GitHub if you think <a href=\"https://github.com/aimhubio/aimos\">AimOS</a> is useful, and here is the repository of¬†<a href=\"https://github.com/aimhubio/aim\">Aim</a>,¬†an easy-to-use &#x26; supercharged open-source experiment tracker.‚≠êÔ∏è</p>"},"_id":"posts/exploring-your-pytorch-lightning-experiments-with-aimos.md","_raw":{"sourceFilePath":"posts/exploring-your-pytorch-lightning-experiments-with-aimos.md","sourceFileName":"exploring-your-pytorch-lightning-experiments-with-aimos.md","sourceFileDir":"posts","contentType":"markdown","flattenedPath":"posts/exploring-your-pytorch-lightning-experiments-with-aimos"},"type":"Post"},{"title":"LangChain + Aim: Building and Debugging AI Systems Made EASY!","date":"2023-04-06T17:51:14.014Z","author":"Gor Arakelyan","description":"As AI systems get increasingly complex, the ability to effectively debug and monitor them becomes crucial. Use Aim to easily trace complex AI systems.","slug":"langchain-aim-building-and-debugging-ai-systems-made-easy","image":"/images/dynamic/langchain_header.jpg","draft":false,"categories":["Integrations"],"body":{"raw":"\n\n# The Rise of Complex AI Systems\n\nWith the introduction of ChatGPT and large language models (LLMs) such as GPT3.5-turbo and GPT4, AI progress has skyrocketed. These models have enabled tons of AI-based applications, bringing the power of LLMs to real-world use cases.\n\nBut the true power of AI comes when we combine LLMs with other tools, scripts, and sources of computation to create much more powerful AI systems than standalone models.\n\n**As AI systems get increasingly complex, the ability to effectively debug and monitor them becomes crucial.** Without comprehensive tracing and debugging, the improvement, monitoring and understanding of these systems become extremely challenging.\n\nIn this article, we will take a look at how to use Aim to easily trace complex AI systems built with LangChain. Specifically, we will go over how to:\n\n* track all inputs and outputs of chains,\n* visualize and explore individual chains,\n* compare several chains side-by-side.\n\n# LangChain: Building AI Systems with LLMs\n\nLangChain is a library designed to enable the development of powerful applications by integrating LLMs with other computational resources or knowledge sources. It streamlines the process of creating applications such as question answering systems, chatbots, and intelligent agents.\n\nIt provides a unified interface for managing and optimizing prompts, creating sequences of calls to LLMs or other utilities (chains), interacting with external data sources, making decisions and taking actions. LangChain empowers developers to build sophisticated, cutting-edge applications by making the most of LLMs and easily connecting them with other tools!\n\n# **Aim:** Upgraded Debugging Experience for AI Systems\n\nMonitoring and debugging AI systems requires more than just scanning output logs on a terminal.\n\n**Introducing Aim!**\n\nAim is an open-source AI metadata library that tracks all aspects of your AI system's execution, facilitating in-depth exploration, monitoring, and reproducibility.\n\nImportantly, Aim helps to query all the tracked metadata programmatically and is equipped with a powerful UI / observability layer for the AI metadata.\n\nIn that way, Aim makes debugging, monitoring, comparing different executions a breeze.\n\n**Experience the ultimate control with Aim!**\n\nCheck out Aim on GitHub: **[github.com/aimhubio/aim](http://github.com/aimhubio/aim)**\n\n![](/images/dynamic/explorer.jpg)\n\n# Aim + LangChain = üöÄ\n\nWith the release of LangChain **[v0.0.127](https://github.com/hwchase17/langchain/releases/tag/v0.0.127)**, it's now possible to trace LangChain agents and chains with Aim using just a few lines of code! **All you need to do is configure the Aim callback and run your executions as usual.**\n\nAim does the rest for you by tracking tools and LLMs‚Äô inputs and outputs, agents' actions, and chains results. As well as, it tracks CLI command and arguments, system info and resource usage, env variables, git info, and terminal outputs.\n\n![](/images/dynamic/langchain_aim.jpg)\n\nLet's move forward and build an agent with LangChain, configure Aim to trace executions, and take a quick journey around the UI to see how Aim can help with debugging and monitoring.\n\n# Hands-On Example: Building a Multi-Task AI Agent\n\n## Setting up the agent and the Aim callback\n\nLet‚Äôs build an agent equipped with two tools:\n\n* the SerpApi tool to access Google search results,\n* the LLM-math tool to perform required mathematical operations.\n\nIn this particular example, we'll prompt the agent to discover who Leonardo DiCaprio's girlfriend is and calculate her current age raised to the 0.43 power:\n\n```python\ntools = load_tools([\"serpapi\", \"llm-math\"], llm=llm, callback_manager=manager)\nagent = initialize_agent(\n    tools,\n    llm,\n    agent=\"zero-shot-react-description\",\n    callback_manager=manager,\n    verbose=True,\n)\nagent.run(\n    \"Who is Leo DiCaprio's girlfriend? What is her current age raised to the 0.43 power?\"\n)\n```\n\nNow that the chain is set up, let's integrate the Aim callback. It takes just a few lines of code and Aim will capture all the moving pieces during the execution.\n\n```python\nfrom langchain.callbacks import AimCallbackHandler\n\naim_callback = AimCallbackHandler(\n    repo=\".\",\n    experiment_name=\"scenario 1: OpenAI LLM\",\n)\n\naim_callback.flush_tracker(langchain_asset=agent, reset=False, finish=True)\n```\n\n> **Aim is entirely open-source and self-hosted, which means your data remains private and isn't shared with third parties.**\n\nFind the full script and more examples in the official LangChain docs: [](https://python.langchain.com/en/latest/ecosystem/aim_tracking.html)**<https://python.langchain.com/en/latest/ecosystem/aim_tracking.html>**\n\n## **Executing the agent and running Aim**\n\nBefore executing the agent, ensure that Aim is installed by executing the following command:\n\n```shell\npip install aim\n```\n\nNow, let's run multiple executions and launch the Aim UI to visualize and explore the results:\n\n1. execute the script by running `python example.py`,\n2. then, start the UI with `aim up` command.\n\nWith the Aim up and running, you can effortlessly dive into the details of each execution, compare results, and gain insights that will help you to debug and iterate over your chains.\n\n## Exploring executions via Aim\n\n### Home page\n\nOn the home page, you'll find an organized view of all your tracked executions, making it easy to keep track of your progress and recent runs. To navigate to a specific execution, simply click on the link, and you'll be taken to a dedicated page with comprehensive information about that particular execution.\n\n![](/images/dynamic/home.jpg)\n\n\n\n### Deep dive into a single execution\n\nWhen navigating to an individual execution page, you'll find an overview of system information and execution details. Here you can access:\n\n* CLI command and arguments,\n* Environment variables,\n* Packages,\n* Git information,\n* System resource usage,\n* and other relevant information about an individual execution.\n\n![](/images/dynamic/individual_exec.jpg)\n\nAim automatically captures terminal outputs during execution. Access these logs in the ‚ÄúLogs‚Äù tab to easily keep track of the progress of your AI system and identify issues.\n\n![](/images/dynamic/logs.jpg)\n\nIn the \"Text\" tab, you can explore the inner workings of a chain, including agent actions, tools and LLMs inputs and outputs. This in-depth view allows you to review the metadata collected at every step of execution.\n\n![](/images/dynamic/text_tab.jpg)\n\nWith Aim's Text Explorer, you can effortlessly compare multiple executions, examining their actions, inputs, and outputs side by side. It helps to identify patterns or spot discrepancies.\n\n![](/images/dynamic/explorer.jpg)\n\nFor instance, in the given example, two executions produced the response, \"Camila Morrone is Leo DiCaprio's girlfriend, and her current age raised to the 0.43 power is 3.8507291225496925.\" However, another execution returned the answer \"3.991298452658078\". This discrepancy occurred because the first two executions incorrectly identified Camila Morrone's age as 23 instead of 25.\n\n**With Text Explorer, you can easily compare and analyze the outcomes of various executions and make decisions to adjust agents and prompts further.**\n\n# Wrapping Up\n\nIn conclusion, as AI systems become more complex and powerful, the need for comprehensive tracing and debugging tools becomes increasingly essential. LangChain, when combined with Aim, provides a powerful solution for building and monitoring sophisticated AI applications. By following the practical examples in this blog post, you can effectively monitor and debug your LangChain-based systems!\n\n# Learn more\n\nCheck out the Aim + LangChain integration docs¬†[here](https://python.langchain.com/en/latest/ecosystem/aim_tracking.html).\n\nLangChain repo:¬†[](https://github.com/hwchase17/langchain)<https://github.com/hwchase17/langchain>\n\nAim repo:¬†[](https://github.com/aimhubio/aim)<https://github.com/aimhubio/aim>\n\nIf you have questions, join the¬†[Aim community](https://community.aimstack.io/), share your feedback, open issues for new features and bugs. You‚Äôre most welcome! üôå\n\nDrop a ‚≠êÔ∏è on¬†[GitHub](https://github.com/aimhubio/aim), if you find Aim useful.","html":"<h1>The Rise of Complex AI Systems</h1>\n<p>With the introduction of ChatGPT and large language models (LLMs) such as GPT3.5-turbo and GPT4, AI progress has skyrocketed. These models have enabled tons of AI-based applications, bringing the power of LLMs to real-world use cases.</p>\n<p>But the true power of AI comes when we combine LLMs with other tools, scripts, and sources of computation to create much more powerful AI systems than standalone models.</p>\n<p><strong>As AI systems get increasingly complex, the ability to effectively debug and monitor them becomes crucial.</strong> Without comprehensive tracing and debugging, the improvement, monitoring and understanding of these systems become extremely challenging.</p>\n<p>In this article, we will take a look at how to use Aim to easily trace complex AI systems built with LangChain. Specifically, we will go over how to:</p>\n<ul>\n<li>track all inputs and outputs of chains,</li>\n<li>visualize and explore individual chains,</li>\n<li>compare several chains side-by-side.</li>\n</ul>\n<h1>LangChain: Building AI Systems with LLMs</h1>\n<p>LangChain is a library designed to enable the development of powerful applications by integrating LLMs with other computational resources or knowledge sources. It streamlines the process of creating applications such as question answering systems, chatbots, and intelligent agents.</p>\n<p>It provides a unified interface for managing and optimizing prompts, creating sequences of calls to LLMs or other utilities (chains), interacting with external data sources, making decisions and taking actions. LangChain empowers developers to build sophisticated, cutting-edge applications by making the most of LLMs and easily connecting them with other tools!</p>\n<h1><strong>Aim:</strong> Upgraded Debugging Experience for AI Systems</h1>\n<p>Monitoring and debugging AI systems requires more than just scanning output logs on a terminal.</p>\n<p><strong>Introducing Aim!</strong></p>\n<p>Aim is an open-source AI metadata library that tracks all aspects of your AI system's execution, facilitating in-depth exploration, monitoring, and reproducibility.</p>\n<p>Importantly, Aim helps to query all the tracked metadata programmatically and is equipped with a powerful UI / observability layer for the AI metadata.</p>\n<p>In that way, Aim makes debugging, monitoring, comparing different executions a breeze.</p>\n<p><strong>Experience the ultimate control with Aim!</strong></p>\n<p>Check out Aim on GitHub: <strong><a href=\"http://github.com/aimhubio/aim\">github.com/aimhubio/aim</a></strong></p>\n<p><img src=\"/images/dynamic/explorer.jpg\" alt=\"\"></p>\n<h1>Aim + LangChain = üöÄ</h1>\n<p>With the release of LangChain <strong><a href=\"https://github.com/hwchase17/langchain/releases/tag/v0.0.127\">v0.0.127</a></strong>, it's now possible to trace LangChain agents and chains with Aim using just a few lines of code! <strong>All you need to do is configure the Aim callback and run your executions as usual.</strong></p>\n<p>Aim does the rest for you by tracking tools and LLMs‚Äô inputs and outputs, agents' actions, and chains results. As well as, it tracks CLI command and arguments, system info and resource usage, env variables, git info, and terminal outputs.</p>\n<p><img src=\"/images/dynamic/langchain_aim.jpg\" alt=\"\"></p>\n<p>Let's move forward and build an agent with LangChain, configure Aim to trace executions, and take a quick journey around the UI to see how Aim can help with debugging and monitoring.</p>\n<h1>Hands-On Example: Building a Multi-Task AI Agent</h1>\n<h2>Setting up the agent and the Aim callback</h2>\n<p>Let‚Äôs build an agent equipped with two tools:</p>\n<ul>\n<li>the SerpApi tool to access Google search results,</li>\n<li>the LLM-math tool to perform required mathematical operations.</li>\n</ul>\n<p>In this particular example, we'll prompt the agent to discover who Leonardo DiCaprio's girlfriend is and calculate her current age raised to the 0.43 power:</p>\n<pre><code class=\"language-python\">tools = load_tools([\"serpapi\", \"llm-math\"], llm=llm, callback_manager=manager)\nagent = initialize_agent(\n    tools,\n    llm,\n    agent=\"zero-shot-react-description\",\n    callback_manager=manager,\n    verbose=True,\n)\nagent.run(\n    \"Who is Leo DiCaprio's girlfriend? What is her current age raised to the 0.43 power?\"\n)\n</code></pre>\n<p>Now that the chain is set up, let's integrate the Aim callback. It takes just a few lines of code and Aim will capture all the moving pieces during the execution.</p>\n<pre><code class=\"language-python\">from langchain.callbacks import AimCallbackHandler\n\naim_callback = AimCallbackHandler(\n    repo=\".\",\n    experiment_name=\"scenario 1: OpenAI LLM\",\n)\n\naim_callback.flush_tracker(langchain_asset=agent, reset=False, finish=True)\n</code></pre>\n<blockquote>\n<p><strong>Aim is entirely open-source and self-hosted, which means your data remains private and isn't shared with third parties.</strong></p>\n</blockquote>\n<p>Find the full script and more examples in the official LangChain docs: <a href=\"https://python.langchain.com/en/latest/ecosystem/aim_tracking.html\"></a><strong><a href=\"https://python.langchain.com/en/latest/ecosystem/aim_tracking.html\">https://python.langchain.com/en/latest/ecosystem/aim_tracking.html</a></strong></p>\n<h2><strong>Executing the agent and running Aim</strong></h2>\n<p>Before executing the agent, ensure that Aim is installed by executing the following command:</p>\n<pre><code class=\"language-shell\">pip install aim\n</code></pre>\n<p>Now, let's run multiple executions and launch the Aim UI to visualize and explore the results:</p>\n<ol>\n<li>execute the script by running <code>python example.py</code>,</li>\n<li>then, start the UI with <code>aim up</code> command.</li>\n</ol>\n<p>With the Aim up and running, you can effortlessly dive into the details of each execution, compare results, and gain insights that will help you to debug and iterate over your chains.</p>\n<h2>Exploring executions via Aim</h2>\n<h3>Home page</h3>\n<p>On the home page, you'll find an organized view of all your tracked executions, making it easy to keep track of your progress and recent runs. To navigate to a specific execution, simply click on the link, and you'll be taken to a dedicated page with comprehensive information about that particular execution.</p>\n<p><img src=\"/images/dynamic/home.jpg\" alt=\"\"></p>\n<h3>Deep dive into a single execution</h3>\n<p>When navigating to an individual execution page, you'll find an overview of system information and execution details. Here you can access:</p>\n<ul>\n<li>CLI command and arguments,</li>\n<li>Environment variables,</li>\n<li>Packages,</li>\n<li>Git information,</li>\n<li>System resource usage,</li>\n<li>and other relevant information about an individual execution.</li>\n</ul>\n<p><img src=\"/images/dynamic/individual_exec.jpg\" alt=\"\"></p>\n<p>Aim automatically captures terminal outputs during execution. Access these logs in the ‚ÄúLogs‚Äù tab to easily keep track of the progress of your AI system and identify issues.</p>\n<p><img src=\"/images/dynamic/logs.jpg\" alt=\"\"></p>\n<p>In the \"Text\" tab, you can explore the inner workings of a chain, including agent actions, tools and LLMs inputs and outputs. This in-depth view allows you to review the metadata collected at every step of execution.</p>\n<p><img src=\"/images/dynamic/text_tab.jpg\" alt=\"\"></p>\n<p>With Aim's Text Explorer, you can effortlessly compare multiple executions, examining their actions, inputs, and outputs side by side. It helps to identify patterns or spot discrepancies.</p>\n<p><img src=\"/images/dynamic/explorer.jpg\" alt=\"\"></p>\n<p>For instance, in the given example, two executions produced the response, \"Camila Morrone is Leo DiCaprio's girlfriend, and her current age raised to the 0.43 power is 3.8507291225496925.\" However, another execution returned the answer \"3.991298452658078\". This discrepancy occurred because the first two executions incorrectly identified Camila Morrone's age as 23 instead of 25.</p>\n<p><strong>With Text Explorer, you can easily compare and analyze the outcomes of various executions and make decisions to adjust agents and prompts further.</strong></p>\n<h1>Wrapping Up</h1>\n<p>In conclusion, as AI systems become more complex and powerful, the need for comprehensive tracing and debugging tools becomes increasingly essential. LangChain, when combined with Aim, provides a powerful solution for building and monitoring sophisticated AI applications. By following the practical examples in this blog post, you can effectively monitor and debug your LangChain-based systems!</p>\n<h1>Learn more</h1>\n<p>Check out the Aim + LangChain integration docs¬†<a href=\"https://python.langchain.com/en/latest/ecosystem/aim_tracking.html\">here</a>.</p>\n<p>LangChain repo:¬†<a href=\"https://github.com/hwchase17/langchain\"></a><a href=\"https://github.com/hwchase17/langchain\">https://github.com/hwchase17/langchain</a></p>\n<p>Aim repo:¬†<a href=\"https://github.com/aimhubio/aim\"></a><a href=\"https://github.com/aimhubio/aim\">https://github.com/aimhubio/aim</a></p>\n<p>If you have questions, join the¬†<a href=\"https://community.aimstack.io/\">Aim community</a>, share your feedback, open issues for new features and bugs. You‚Äôre most welcome! üôå</p>\n<p>Drop a ‚≠êÔ∏è on¬†<a href=\"https://github.com/aimhubio/aim\">GitHub</a>, if you find Aim useful.</p>"},"_id":"posts/langchain-aim-building-and-debugging-ai-systems-made-easy.md","_raw":{"sourceFilePath":"posts/langchain-aim-building-and-debugging-ai-systems-made-easy.md","sourceFileName":"langchain-aim-building-and-debugging-ai-systems-made-easy.md","sourceFileDir":"posts","contentType":"markdown","flattenedPath":"posts/langchain-aim-building-and-debugging-ai-systems-made-easy"},"type":"Post"},{"title":"Launching Aim on Hugging Face Spaces","date":"2023-04-19T13:41:34.213Z","author":"Gor Arakelyan","description":"Deploy Aim on Hugging Face Spaces using the Docker template. Aim empowers you to explore logs with interactive visualizations, easily compare training runs at scale and be on top of ML development insights.","slug":"launching-aim-on-hugging-face-spaces","image":"/images/dynamic/hf_space_header.png","draft":false,"categories":["Integrations"],"body":{"raw":"We are excited to announce the launch of Aim on Hugging Face Spaces! üöÄ\n\nWith just a few clicks, you can now deploy Aim on the Hugging Face Hub and seamlessly share your training results with anyone.\n\n![](/images/dynamic/hf_space_me.png)\n\nAim is an open-source, self-hosted AI Metadata tracking tool.\\\nIt provides a performant and powerful UI for exploring and comparing metadata, such as training runs or AI agents executions. Additionally, its SDK enables programmatic access to tracked metadata ‚Äî perfect for automations and Jupyter Notebook analysis.\n\nIn this article, you will learn how to deploy and share your own Aim Space. Also, we will have a quick tour over Aim and learn how it can help to explore and compare your training logs with ease. Let‚Äôs dive in and get started!\n\nLearn more about Aim on the GitHub repository: **[github.com/aimhubio/aim](https://github.com/aimhubio/aim)**\n\n## Deploy Aim on Hugging Face Spaces within seconds using the Docker template\n\nTo get started, simply navigate to the Spaces page on the Hugging Face Hub and click on the ‚ÄúCreate new Space‚Äù button, or open the page directly by the following link: [](https://huggingface.co/new-space?template=aimstack/aim)**<https://huggingface.co/new-space?template=aimstack/aim>**\n\n![](/images/dynamic/hf_space_deploy.png)\n\nSet up your Aim Space in no time:\n\n1. Choose a name for your Space.\n2. Adjust Space hardware and the visibility mode.\n3. Submit your Space!\n\nAfter submitting the Space, you'll be able to monitor its progress through the building status:\n\n![](/images/dynamic/hf_space_building.png)\n\nOnce it transitions to ‚ÄúRunning‚Äù, your space is ready to go!\n\n![](/images/dynamic/hf_space_running.png)\n\n**Ta-da! üéâ You're all set to start using Aim on Hugging Face.**\n\nBy pushing your logs to your Space, you can easily explore, compare, and share them with anyone who has access. Here's how to do it in just two simple steps:\n\n1. Run the following bash command to compress `.aim` directory:\n\n   ```shell\n   tar -czvf aim_repo.tar.gz .aim\n   ```\n2. Commit and push files to your Space.\n\nThat's it! Now open the App section of your Space, and Aim will display your training logs.\n\nUpdating Spaces is incredibly convenient ‚Äì you just need to commit the changes to the repository, and it will automatically re-deploy the application for you. üî•\n\n## See Aim in Action with Existing Demos on the Hub\n\nLet‚Äôs explore live Aim demos already available on the Hub. Each demo highlights a distinct use case and demonstrates the power of Aim in action.\n\n* Neural machine translation task: [](https://huggingface.co/spaces/aimstack/nmt)<https://huggingface.co/spaces/aimstack/nmt>\n* Simple handwritten digits recognition task: [](https://huggingface.co/spaces/aimstack/digit-recognition)<https://huggingface.co/spaces/aimstack/digit-recognition>\n* Image generation task with lightweight GAN implementation: [](https://huggingface.co/spaces/aimstack/image-generation)<https://huggingface.co/spaces/aimstack/image-generation>\n\n![](/images/dynamic/hf_space_demos.png)\n\nWhen navigating to your Aim Space, you'll see the Aim homepage, which provides a quick glance at your training statistics and an overview of your logs.\n\n![Aim homepage](/images/dynamic/hf_space_overview.png \"Aim homepage\")\n\nOpen the individual run page to find all the insights related to that run, including tracked hyper-parameters, metric results, system information (CLI args, env vars, Git info, etc.) and visualizations.\n\n![Individual run page](/images/dynamic/hf_space_individual_run.png \"Individual run page\")\n\nTake your training results analysis to the next level with Aim's Explorers - tools that allow to deeply compare tracked metadata across runs.\n\nMetrics Explorer, for instance, enables you to query tracked metrics and perform advanced manipulations such as grouping metrics, aggregation, smoothing, adjusting axes scales and other complex interactions.\n\n![Metrics Explorer](/images/dynamic/hf_space_me.png \"Metrics Explorer\")\n\nExplorers provide fully Python-compatible expressions for search, allowing you to query metadata with ease.\n\n![Pythonic search](/images/dynamic/hf_space_pythonic_search.png \"Pythonic search\")\n\nIn addition to Metrics Explorer, Aim offers a suite of Explorers designed to help you explore and compare a variety of media types, including images, text, audio, and Plotly figures.\n\n![Images Explorer](/images/dynamic/hf_space_media.png \"Images Explorer\")\n\nUse Aim Space on Hugging Face to effortlessly upload and share your training results with the community in a few steps. Aim empowers you to explore your logs with interactive visualizations at your fingertips, easily compare training runs at scale and be on top of your ML development insights!\n\n## One more thing‚Ä¶ üëÄ\n\nHaving Aim logs hosted on Hugging Face Hub, you can embed it in notebooks and websites.\n\nTo embed your Space, construct the following link based on Space owner and Space name: **`https://owner-space-name.hf.space`**. This link can be used to embed your Space in any website or notebook using the following HTML code:\n\n```html\n%%html\n<iframe\n    src=\"https://owner-space-name.hf.space\"\n    frameborder=\"0\"\n    width=100%\n    height=\"800\"\n>\n</iframe>\n```\n\n## Next steps\n\nWe are going to continuously iterate over Aim Space onboarding and usability, including:\n\n* the ability to read logs directly from Hugging Face Hub model repos,\n* automatic conversion of TensorBoard logs to Aim format,\n* Aim HF Space-specific onboarding steps.\n\nMuch more coming soon... stay tuned for the updates!\n\n## Learn more\n\nCheck out Aim Space documentation [here](https://aimstack.readthedocs.io/en/latest/using/huggingface_spaces.html)\n\nAim repo on GitHub: [github.com/aimhubio/aim](http://github.com/aimhubio/aim)\n\nIf you have questions, join the¬†[Aim community](https://community.aimstack.io/), share your feedback, open issues for new features and bugs. You‚Äôre most welcome! üôå\n\nDrop a ‚≠êÔ∏è on¬†[GitHub](https://github.com/aimhubio/aim), if you find Aim useful.","html":"<p>We are excited to announce the launch of Aim on Hugging Face Spaces! üöÄ</p>\n<p>With just a few clicks, you can now deploy Aim on the Hugging Face Hub and seamlessly share your training results with anyone.</p>\n<p><img src=\"/images/dynamic/hf_space_me.png\" alt=\"\"></p>\n<p>Aim is an open-source, self-hosted AI Metadata tracking tool.<br>\nIt provides a performant and powerful UI for exploring and comparing metadata, such as training runs or AI agents executions. Additionally, its SDK enables programmatic access to tracked metadata ‚Äî perfect for automations and Jupyter Notebook analysis.</p>\n<p>In this article, you will learn how to deploy and share your own Aim Space. Also, we will have a quick tour over Aim and learn how it can help to explore and compare your training logs with ease. Let‚Äôs dive in and get started!</p>\n<p>Learn more about Aim on the GitHub repository: <strong><a href=\"https://github.com/aimhubio/aim\">github.com/aimhubio/aim</a></strong></p>\n<h2>Deploy Aim on Hugging Face Spaces within seconds using the Docker template</h2>\n<p>To get started, simply navigate to the Spaces page on the Hugging Face Hub and click on the ‚ÄúCreate new Space‚Äù button, or open the page directly by the following link: <a href=\"https://huggingface.co/new-space?template=aimstack/aim\"></a><strong><a href=\"https://huggingface.co/new-space?template=aimstack/aim\">https://huggingface.co/new-space?template=aimstack/aim</a></strong></p>\n<p><img src=\"/images/dynamic/hf_space_deploy.png\" alt=\"\"></p>\n<p>Set up your Aim Space in no time:</p>\n<ol>\n<li>Choose a name for your Space.</li>\n<li>Adjust Space hardware and the visibility mode.</li>\n<li>Submit your Space!</li>\n</ol>\n<p>After submitting the Space, you'll be able to monitor its progress through the building status:</p>\n<p><img src=\"/images/dynamic/hf_space_building.png\" alt=\"\"></p>\n<p>Once it transitions to ‚ÄúRunning‚Äù, your space is ready to go!</p>\n<p><img src=\"/images/dynamic/hf_space_running.png\" alt=\"\"></p>\n<p><strong>Ta-da! üéâ You're all set to start using Aim on Hugging Face.</strong></p>\n<p>By pushing your logs to your Space, you can easily explore, compare, and share them with anyone who has access. Here's how to do it in just two simple steps:</p>\n<ol>\n<li>\n<p>Run the following bash command to compress <code>.aim</code> directory:</p>\n<pre><code class=\"language-shell\">tar -czvf aim_repo.tar.gz .aim\n</code></pre>\n</li>\n<li>\n<p>Commit and push files to your Space.</p>\n</li>\n</ol>\n<p>That's it! Now open the App section of your Space, and Aim will display your training logs.</p>\n<p>Updating Spaces is incredibly convenient ‚Äì you just need to commit the changes to the repository, and it will automatically re-deploy the application for you. üî•</p>\n<h2>See Aim in Action with Existing Demos on the Hub</h2>\n<p>Let‚Äôs explore live Aim demos already available on the Hub. Each demo highlights a distinct use case and demonstrates the power of Aim in action.</p>\n<ul>\n<li>Neural machine translation task: <a href=\"https://huggingface.co/spaces/aimstack/nmt\"></a><a href=\"https://huggingface.co/spaces/aimstack/nmt\">https://huggingface.co/spaces/aimstack/nmt</a></li>\n<li>Simple handwritten digits recognition task: <a href=\"https://huggingface.co/spaces/aimstack/digit-recognition\"></a><a href=\"https://huggingface.co/spaces/aimstack/digit-recognition\">https://huggingface.co/spaces/aimstack/digit-recognition</a></li>\n<li>Image generation task with lightweight GAN implementation: <a href=\"https://huggingface.co/spaces/aimstack/image-generation\"></a><a href=\"https://huggingface.co/spaces/aimstack/image-generation\">https://huggingface.co/spaces/aimstack/image-generation</a></li>\n</ul>\n<p><img src=\"/images/dynamic/hf_space_demos.png\" alt=\"\"></p>\n<p>When navigating to your Aim Space, you'll see the Aim homepage, which provides a quick glance at your training statistics and an overview of your logs.</p>\n<p><img src=\"/images/dynamic/hf_space_overview.png\" alt=\"Aim homepage\" title=\"Aim homepage\"></p>\n<p>Open the individual run page to find all the insights related to that run, including tracked hyper-parameters, metric results, system information (CLI args, env vars, Git info, etc.) and visualizations.</p>\n<p><img src=\"/images/dynamic/hf_space_individual_run.png\" alt=\"Individual run page\" title=\"Individual run page\"></p>\n<p>Take your training results analysis to the next level with Aim's Explorers - tools that allow to deeply compare tracked metadata across runs.</p>\n<p>Metrics Explorer, for instance, enables you to query tracked metrics and perform advanced manipulations such as grouping metrics, aggregation, smoothing, adjusting axes scales and other complex interactions.</p>\n<p><img src=\"/images/dynamic/hf_space_me.png\" alt=\"Metrics Explorer\" title=\"Metrics Explorer\"></p>\n<p>Explorers provide fully Python-compatible expressions for search, allowing you to query metadata with ease.</p>\n<p><img src=\"/images/dynamic/hf_space_pythonic_search.png\" alt=\"Pythonic search\" title=\"Pythonic search\"></p>\n<p>In addition to Metrics Explorer, Aim offers a suite of Explorers designed to help you explore and compare a variety of media types, including images, text, audio, and Plotly figures.</p>\n<p><img src=\"/images/dynamic/hf_space_media.png\" alt=\"Images Explorer\" title=\"Images Explorer\"></p>\n<p>Use Aim Space on Hugging Face to effortlessly upload and share your training results with the community in a few steps. Aim empowers you to explore your logs with interactive visualizations at your fingertips, easily compare training runs at scale and be on top of your ML development insights!</p>\n<h2>One more thing‚Ä¶ üëÄ</h2>\n<p>Having Aim logs hosted on Hugging Face Hub, you can embed it in notebooks and websites.</p>\n<p>To embed your Space, construct the following link based on Space owner and Space name: <strong><code>https://owner-space-name.hf.space</code></strong>. This link can be used to embed your Space in any website or notebook using the following HTML code:</p>\n<pre><code class=\"language-html\">%%html\n&#x3C;iframe\n    src=\"https://owner-space-name.hf.space\"\n    frameborder=\"0\"\n    width=100%\n    height=\"800\"\n>\n&#x3C;/iframe>\n</code></pre>\n<h2>Next steps</h2>\n<p>We are going to continuously iterate over Aim Space onboarding and usability, including:</p>\n<ul>\n<li>the ability to read logs directly from Hugging Face Hub model repos,</li>\n<li>automatic conversion of TensorBoard logs to Aim format,</li>\n<li>Aim HF Space-specific onboarding steps.</li>\n</ul>\n<p>Much more coming soon... stay tuned for the updates!</p>\n<h2>Learn more</h2>\n<p>Check out Aim Space documentation <a href=\"https://aimstack.readthedocs.io/en/latest/using/huggingface_spaces.html\">here</a></p>\n<p>Aim repo on GitHub: <a href=\"http://github.com/aimhubio/aim\">github.com/aimhubio/aim</a></p>\n<p>If you have questions, join the¬†<a href=\"https://community.aimstack.io/\">Aim community</a>, share your feedback, open issues for new features and bugs. You‚Äôre most welcome! üôå</p>\n<p>Drop a ‚≠êÔ∏è on¬†<a href=\"https://github.com/aimhubio/aim\">GitHub</a>, if you find Aim useful.</p>"},"_id":"posts/launching-aim-on-hugging-face-spaces.md","_raw":{"sourceFilePath":"posts/launching-aim-on-hugging-face-spaces.md","sourceFileName":"launching-aim-on-hugging-face-spaces.md","sourceFileDir":"posts","contentType":"markdown","flattenedPath":"posts/launching-aim-on-hugging-face-spaces"},"type":"Post"},{"title":"Streamlining your Hugging Face Experiments with AimOS","date":"2023-12-29T13:33:30.989Z","author":"Hovhannes Tamoyan","description":"AimCallback¬†for¬†Hugging Face¬†is designed to enhance your experiment logging and monitoring. It thoroughly records essential information, including hyperparameters, training, validation, and test time metrics like loss and accuracy.","slug":"streamlining-your-hugging-face-experiments-with-aimos","image":"/images/dynamic/hugging-face-1-.png","draft":false,"categories":["Integrations"],"body":{"raw":"AimCallback¬†for¬†[Hugging Face](https://huggingface.co/)¬†is designed to enhance your experiment logging and monitoring. It thoroughly records essential information, including hyperparameters, training, validation, and test time metrics like loss and accuracy. Moreover, it offers comprehensive system usage tracking, keeping an eye on CPU and GPU memory utilization.\n\n## Introduction\n\nDiscover how [AimOS](https://aimstack.io/blog/new-releases/aim-4-0-open-source-modular-observability-for-ai-systems) effortlessly monitors your Hugging Face experiments, capturing every detail of hyperparameters and metrics. We'll dive into a sample script to demonstrate the powerful integration between AimOS and Hugging Face.\n\n## Running a Sample Training with Hugging Face: A Step-by-Step Guide\n\nExplore a hands-on example using the `yelp_review_full` dataset consisting of Yelp reviews, with the review scores ranging from 1 to 5 to full-tune a BERT base model for sequence classification.\n\n\n\n## Setting the Stage\n\nBefore diving into the script, ensure that AimOS is installed. If not, simply run ‚Äúpip install aimos‚Äù, and head over to the [GitHub page](https://github.com/aimhubio/aimos) for more.\n\n## Sample Script\n\n\n\n### 1. Importing Required Modules\n\nBegin by importing the necessary modules.\n\n```\nimport evaluate\nimport numpy as np\nfrom aimstack.experiment_tracker.hugging_face import Callback as AimCallback\nfrom datasets import load_dataset\nfrom transformers import (\n    AutoModelForSequenceClassification,\n    AutoTokenizer,\n    Trainer,\n    TrainingArguments,\n)\n```\n\n### 2. Preparing the Dataset and the Tokenizer\n\nDefine a function for tokenization.\n\n```\ndef tokenize_function(examples):\n    return tokenizer(examples[\"text\"], padding=\"max_length\", truncation=True)\n```\n\nTokenize the dataset using the BERT base-cased tokenizer.\n\n```\ndataset = load_dataset(\"yelp_review_full\")\ntokenizer = AutoTokenizer.from_pretrained(\"bert-base-cased\")\n\ntokenized_datasets = dataset.map(tokenize_function, batched=True)\n```\n\nSelect a small subset of the dataset for training and evaluation.\n\n```\nsmall_train_dataset = tokenized_datasets[\"train\"].shuffle(seed=42).select(range(1000))\nsmall_eval_dataset = tokenized_datasets[\"test\"].shuffle(seed=42).select(range(1000))\n```\n\nDefine the metrics for evaluation.\n\n```\ndef compute_metrics(eval_pred):\n    logits, labels = eval_pred\n    predictions = np.argmax(logits, axis=-1)\n    return metric.compute(predictions=predictions, references=labels)\n\nmetric = evaluate.load(\"accuracy\")\n```\n\n### 3. Instantiate the Model\n\nInstantiate the BERT base-cased model for sequence classification.\n\n```\nmodel = AutoModelForSequenceClassification.from_pretrained(\n    \"bert-base-cased\", num_labels=5\n)\n```\n\n### 4. Initialize AimOS Callback\n\nInitialize the AimOS callback by providing the repository address and experiment name. Here the `aim://0.0.0.0:53800` is the default address of your aimos server if it‚Äôs running on your local machine:\n\n```\naim_callback = AimCallback(\n    repo=\"aim://0.0.0.0:53800\", experiment_name=\"yelp_classification\"\n)\n```\n\nEnsure that your AimOS server is active on the default `53800` port. Start the AimOS server with the following command:\n\n```\naimos server\n```\n\n### 5. Training\n\nSet the training arguments, specifying the output directory, number of epochs, and learning rate. Train the model by providing the AimOS callback in the Trainer arguments.\n\n```\ntraining_args = TrainingArguments(output_dir=\"test_trainer\", num_train_epochs=10, learning_rate=5e-7)\n\ntrainer = Trainer(\n    model=model,\n    args=training_args,\n    train_dataset=small_train_dataset,\n    eval_dataset=small_eval_dataset,\n    compute_metrics=compute_metrics,\n    callbacks=[aim_callback],\n)\n\ntrainer.train()\n```\n\nAfter completing these steps, you will successfully log all actions on AimOS. Now, run the AimOS UI to observe the tracked metadata. Navigate to the folder where the .aim repository is initialized and execute:\n\n```\naimos ui\n```\n\nThis is the view you'll see after opening the provided URL: \n\n![AimOS Apps](/images/dynamic/seamless-experimentation-screenshot-dec-13.png \"AimOS Apps\")\n\n## Interpreting Experiment Results\n\nExplore the wealth of information provided by AimOS to gain insights into your Hugging Face experiment. We'll guide you through the key aspects to understand experiment's effectiveness.\n\n\n\n## AimOS Overview Page\n\nHead over to the AimOS Overview page to witness the containers and sequences overview tables of your Hugging Face experiment. This page offers an abstract overview of the number of experiments, sequences, metrics, and system metrics tracked within your experiment.\n\n![Overview](/images/dynamic/seam.png \"Overview\")\n\n## AimOS Runs Page\n\nVisit the AimOS Runs page to view the table of all runs, containing basic information about the experiment. This includes hash system parameters, hyperparameters, and model configurations/information.\n\n![Runs page](/images/dynamic/seamless-experimentation-screenshot-dec-13-1-.png \"Runs page\")\n\nBy navigating to each run‚Äôs individual page, you'll have a detailed view of the activities within that run.\n\n## Run Overview\n\n\n\nNavigate through the Overview tab to grasp essential information such as Run Parameters, Metrics (last metrics scores), CLI Arguments used to execute the experiment, Environment Variables, Packages, and their versions.\n\n![Run overview](/images/dynamic/seamless-experimentation-screenshot-dec-13-2-.png \"Run overview\")\n\n## Params Tab\n\nFor a more detailed view of all parameters, navigate to the Params tab.\n\n![Params tab](/images/dynamic/seamless-experimentation-screenshot-dec-13-3-.png \"Params tab\")\n\n## Metrics Tab\n\nIn the Metrics tab, explore all the tracked metrics graphs, including the change of learning_rate, loss, samples_per_second, steps_per_second, total_flos, and steps.\n\n![Metrics tab](/images/dynamic/seamless-experimentation-screenshot-dec-13-4-.png \"Metrics tab \")\n\nIn the remaining tabs, discover corresponding types of tracked objects, such as Figures, Text, and Audios.\n\n## Wrapping up\n\nAimOS provides a comprehensive suite of tools to analyze and understand your Hugging Face experiment thoroughly. By leveraging these insights, you can elevate your experimentation process and make data-driven decisions. \n\nFor further insights into AI system monitoring and observability of software lifecycle, check out our latest article on [AimStack blog.](https://aimstack.io/blog/new-releases/aim-4-0-open-source-modular-observability-for-ai-systems)\n\n## Learn more\n\n[](https://aimstack.io/blog/new-releases/aim-4-0-open-source-modular-observability-for-ai-systems)\n\n[AimOS is on a mission to democratize AI Systems logging tools.¬†üôå](https://aimos.readthedocs.io/en/latest/apps/overview.html)[](https://aimstack.io/blog/new-releases/aim-4-0-open-source-modular-observability-for-ai-systems)\n\nTry out¬†[AimOS](https://github.com/aimhubio/aimos), join the [Aim community](https://community.aimstack.io/)¬†and contribute by sharing your thoughts, suggesting new features, or reporting bugs.\n\nDon‚Äôt forget to leave us a star on¬†[GitHub](https://github.com/aimhubio/aimos)¬†if you think AimOS is useful, and here is the repository of¬†[Aim](https://github.com/aimhubio/aim),¬†an easy-to-use & supercharged open-source experiment tracker.‚≠êÔ∏è","html":"<p>AimCallback¬†for¬†<a href=\"https://huggingface.co/\">Hugging Face</a>¬†is designed to enhance your experiment logging and monitoring. It thoroughly records essential information, including hyperparameters, training, validation, and test time metrics like loss and accuracy. Moreover, it offers comprehensive system usage tracking, keeping an eye on CPU and GPU memory utilization.</p>\n<h2>Introduction</h2>\n<p>Discover how <a href=\"https://aimstack.io/blog/new-releases/aim-4-0-open-source-modular-observability-for-ai-systems\">AimOS</a> effortlessly monitors your Hugging Face experiments, capturing every detail of hyperparameters and metrics. We'll dive into a sample script to demonstrate the powerful integration between AimOS and Hugging Face.</p>\n<h2>Running a Sample Training with Hugging Face: A Step-by-Step Guide</h2>\n<p>Explore a hands-on example using the <code>yelp_review_full</code> dataset consisting of Yelp reviews, with the review scores ranging from 1 to 5 to full-tune a BERT base model for sequence classification.</p>\n<h2>Setting the Stage</h2>\n<p>Before diving into the script, ensure that AimOS is installed. If not, simply run ‚Äúpip install aimos‚Äù, and head over to the <a href=\"https://github.com/aimhubio/aimos\">GitHub page</a> for more.</p>\n<h2>Sample Script</h2>\n<h3>1. Importing Required Modules</h3>\n<p>Begin by importing the necessary modules.</p>\n<pre><code>import evaluate\nimport numpy as np\nfrom aimstack.experiment_tracker.hugging_face import Callback as AimCallback\nfrom datasets import load_dataset\nfrom transformers import (\n    AutoModelForSequenceClassification,\n    AutoTokenizer,\n    Trainer,\n    TrainingArguments,\n)\n</code></pre>\n<h3>2. Preparing the Dataset and the Tokenizer</h3>\n<p>Define a function for tokenization.</p>\n<pre><code>def tokenize_function(examples):\n    return tokenizer(examples[\"text\"], padding=\"max_length\", truncation=True)\n</code></pre>\n<p>Tokenize the dataset using the BERT base-cased tokenizer.</p>\n<pre><code>dataset = load_dataset(\"yelp_review_full\")\ntokenizer = AutoTokenizer.from_pretrained(\"bert-base-cased\")\n\ntokenized_datasets = dataset.map(tokenize_function, batched=True)\n</code></pre>\n<p>Select a small subset of the dataset for training and evaluation.</p>\n<pre><code>small_train_dataset = tokenized_datasets[\"train\"].shuffle(seed=42).select(range(1000))\nsmall_eval_dataset = tokenized_datasets[\"test\"].shuffle(seed=42).select(range(1000))\n</code></pre>\n<p>Define the metrics for evaluation.</p>\n<pre><code>def compute_metrics(eval_pred):\n    logits, labels = eval_pred\n    predictions = np.argmax(logits, axis=-1)\n    return metric.compute(predictions=predictions, references=labels)\n\nmetric = evaluate.load(\"accuracy\")\n</code></pre>\n<h3>3. Instantiate the Model</h3>\n<p>Instantiate the BERT base-cased model for sequence classification.</p>\n<pre><code>model = AutoModelForSequenceClassification.from_pretrained(\n    \"bert-base-cased\", num_labels=5\n)\n</code></pre>\n<h3>4. Initialize AimOS Callback</h3>\n<p>Initialize the AimOS callback by providing the repository address and experiment name. Here the <code>aim://0.0.0.0:53800</code> is the default address of your aimos server if it‚Äôs running on your local machine:</p>\n<pre><code>aim_callback = AimCallback(\n    repo=\"aim://0.0.0.0:53800\", experiment_name=\"yelp_classification\"\n)\n</code></pre>\n<p>Ensure that your AimOS server is active on the default <code>53800</code> port. Start the AimOS server with the following command:</p>\n<pre><code>aimos server\n</code></pre>\n<h3>5. Training</h3>\n<p>Set the training arguments, specifying the output directory, number of epochs, and learning rate. Train the model by providing the AimOS callback in the Trainer arguments.</p>\n<pre><code>training_args = TrainingArguments(output_dir=\"test_trainer\", num_train_epochs=10, learning_rate=5e-7)\n\ntrainer = Trainer(\n    model=model,\n    args=training_args,\n    train_dataset=small_train_dataset,\n    eval_dataset=small_eval_dataset,\n    compute_metrics=compute_metrics,\n    callbacks=[aim_callback],\n)\n\ntrainer.train()\n</code></pre>\n<p>After completing these steps, you will successfully log all actions on AimOS. Now, run the AimOS UI to observe the tracked metadata. Navigate to the folder where the .aim repository is initialized and execute:</p>\n<pre><code>aimos ui\n</code></pre>\n<p>This is the view you'll see after opening the provided URL:</p>\n<p><img src=\"/images/dynamic/seamless-experimentation-screenshot-dec-13.png\" alt=\"AimOS Apps\" title=\"AimOS Apps\"></p>\n<h2>Interpreting Experiment Results</h2>\n<p>Explore the wealth of information provided by AimOS to gain insights into your Hugging Face experiment. We'll guide you through the key aspects to understand experiment's effectiveness.</p>\n<h2>AimOS Overview Page</h2>\n<p>Head over to the AimOS Overview page to witness the containers and sequences overview tables of your Hugging Face experiment. This page offers an abstract overview of the number of experiments, sequences, metrics, and system metrics tracked within your experiment.</p>\n<p><img src=\"/images/dynamic/seam.png\" alt=\"Overview\" title=\"Overview\"></p>\n<h2>AimOS Runs Page</h2>\n<p>Visit the AimOS Runs page to view the table of all runs, containing basic information about the experiment. This includes hash system parameters, hyperparameters, and model configurations/information.</p>\n<p><img src=\"/images/dynamic/seamless-experimentation-screenshot-dec-13-1-.png\" alt=\"Runs page\" title=\"Runs page\"></p>\n<p>By navigating to each run‚Äôs individual page, you'll have a detailed view of the activities within that run.</p>\n<h2>Run Overview</h2>\n<p>Navigate through the Overview tab to grasp essential information such as Run Parameters, Metrics (last metrics scores), CLI Arguments used to execute the experiment, Environment Variables, Packages, and their versions.</p>\n<p><img src=\"/images/dynamic/seamless-experimentation-screenshot-dec-13-2-.png\" alt=\"Run overview\" title=\"Run overview\"></p>\n<h2>Params Tab</h2>\n<p>For a more detailed view of all parameters, navigate to the Params tab.</p>\n<p><img src=\"/images/dynamic/seamless-experimentation-screenshot-dec-13-3-.png\" alt=\"Params tab\" title=\"Params tab\"></p>\n<h2>Metrics Tab</h2>\n<p>In the Metrics tab, explore all the tracked metrics graphs, including the change of learning_rate, loss, samples_per_second, steps_per_second, total_flos, and steps.</p>\n<p><img src=\"/images/dynamic/seamless-experimentation-screenshot-dec-13-4-.png\" alt=\"Metrics tab\" title=\"Metrics tab \"></p>\n<p>In the remaining tabs, discover corresponding types of tracked objects, such as Figures, Text, and Audios.</p>\n<h2>Wrapping up</h2>\n<p>AimOS provides a comprehensive suite of tools to analyze and understand your Hugging Face experiment thoroughly. By leveraging these insights, you can elevate your experimentation process and make data-driven decisions.</p>\n<p>For further insights into AI system monitoring and observability of software lifecycle, check out our latest article on <a href=\"https://aimstack.io/blog/new-releases/aim-4-0-open-source-modular-observability-for-ai-systems\">AimStack blog.</a></p>\n<h2>Learn more</h2>\n<p><a href=\"https://aimstack.io/blog/new-releases/aim-4-0-open-source-modular-observability-for-ai-systems\"></a></p>\n<p><a href=\"https://aimos.readthedocs.io/en/latest/apps/overview.html\">AimOS is on a mission to democratize AI Systems logging tools.¬†üôå</a><a href=\"https://aimstack.io/blog/new-releases/aim-4-0-open-source-modular-observability-for-ai-systems\"></a></p>\n<p>Try out¬†<a href=\"https://github.com/aimhubio/aimos\">AimOS</a>, join the <a href=\"https://community.aimstack.io/\">Aim community</a>¬†and contribute by sharing your thoughts, suggesting new features, or reporting bugs.</p>\n<p>Don‚Äôt forget to leave us a star on¬†<a href=\"https://github.com/aimhubio/aimos\">GitHub</a>¬†if you think AimOS is useful, and here is the repository of¬†<a href=\"https://github.com/aimhubio/aim\">Aim</a>,¬†an easy-to-use &#x26; supercharged open-source experiment tracker.‚≠êÔ∏è</p>"},"_id":"posts/streamlining-your-hugging-face-experiments-with-aimos.md","_raw":{"sourceFilePath":"posts/streamlining-your-hugging-face-experiments-with-aimos.md","sourceFileName":"streamlining-your-hugging-face-experiments-with-aimos.md","sourceFileDir":"posts","contentType":"markdown","flattenedPath":"posts/streamlining-your-hugging-face-experiments-with-aimos"},"type":"Post"}]},"__N_SSG":true}